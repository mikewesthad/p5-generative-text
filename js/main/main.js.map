{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/js/generators/noise-generators.js","main.js","src/js/main.js","src/js/sketches/noisy-word.js","src/js/utilities/dom-utilities.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","NoiseGenerator1D","p","min","max","increment","offset","this","undefined","position","random","NoiseGenerator2D","xMin","xMax","yMin","yMax","xIncrement","yIncrement","xOffset","yOffset","xNoise","yNoise","prototype","setBounds","setIncrement","generate","_update","noise","map","options","x","y","2","noisyWordsSketch","./sketches/noisy-word.js","3","startSketch","containerID","id","sketchesContainer","document","getElementById","Dom","createElement","p5","_p","preload","setup","draw","font","loadFont","fontPath","renderer","createCanvas","canvasSize","width","height","canvas","addEventListener","isMouseOver","background","textFont","textSize","fontSize","textAlign","CENTER","stroke","fill","strokeWeight","text","rotationNoise","Noise","PI","xyNoise","isFirstFrame","rotation","xyOffset","push","translate","rotate","pop","../generators/noise-generators.js","../utilities/dom-utilities.js","4","forEachInObject","object","iterationFunction","key","hasOwnProperty","tagName","parameters","parent","el","textContent","className","style","addStyle","attributes","addAttributes","appendChild","element","val","removeElement","parentElement","removeChild"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GCiBA,QAAAK,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACAC,KAAAL,EAAAA,EACAK,KAAAJ,IAAAK,SAAAL,EAAAA,EAAA,EACAI,KAAAH,IAAAI,SAAAJ,EAAAA,EAAA,EACAG,KAAAF,UAAAG,SAAAH,EAAAA,EAAA,GACAE,KAAAE,SAAAD,SAAAF,EAAAJ,EAAAQ,OAAA,KAAA,KAAA,EA2CA,QAAAC,GAAAT,EAAAU,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,GACAZ,KAAAa,OAAA,GAAAnB,GAAAC,EAAAU,EAAAC,EAAAG,EAAAE,GACAX,KAAAc,OAAA,GAAApB,GAAAC,EAAAY,EAAAC,EAAAE,EAAAE,GACAZ,KAAAL,EAAAA,EArEAF,EAAAJ,SACAK,iBAAAA,EACAU,iBAAAA,GA4BAV,EAAAqB,UAAAC,UAAA,SAAApB,EAAAC,GACAI,SAAAL,IAAAI,KAAAJ,IAAAA,GACAK,SAAAJ,IAAAG,KAAAH,IAAAA,IAOAH,EAAAqB,UAAAE,aAAA,SAAAnB,GACAG,SAAAH,IAAAE,KAAAF,UAAAA,IAOAJ,EAAAqB,UAAAG,SAAA,WACAlB,KAAAmB,SACA,IAAA1C,GAAAuB,KAAAL,EAAAyB,MAAApB,KAAAE,SAEA,OADAzB,GAAAuB,KAAAL,EAAA0B,IAAA5C,EAAA,EAAA,EAAAuB,KAAAJ,IAAAI,KAAAH,MAQAH,EAAAqB,UAAAI,QAAA,WACAnB,KAAAE,UAAAF,KAAAF,WAkBAM,EAAAW,UAAAC,UAAA,SAAAM,GACAA,IACArB,SAAAqB,EAAAjB,OAAAL,KAAAK,KAAAiB,EAAAjB,MACAJ,SAAAqB,EAAAhB,OAAAN,KAAAM,KAAAgB,EAAAhB,MACAL,SAAAqB,EAAAf,OAAAP,KAAAO,KAAAe,EAAAf,MACAN,SAAAqB,EAAAd,OAAAR,KAAAQ,KAAAc,EAAAd,QAQAJ,EAAAW,UAAAC,UAAA,SAAAM,GACAA,IACArB,SAAAqB,EAAAb,YAAAT,KAAAa,OAAAI,aACAK,EAAAb,YACAR,SAAAqB,EAAAZ,YAAAV,KAAAc,OAAAG,aACAK,EAAAZ,cAQAN,EAAAW,UAAAG,SAAA,WACA,OACAK,EAAAvB,KAAAa,OAAAK,WACAM,EAAAxB,KAAAc,OAAAI,kBCIMO,GAAG,SAAS1C,EAAQU,EAAOJ,GC9GjC,GAAAqC,GAAA3C,EAAA,2BACA2C,ODgHGC,2BAA2B,IAAIC,GAAG,SAAS7C,EAAQU,EAAOJ,GE/F7D,QAAAwC,GAAAC,GAEA,GAAAC,GAAA,aACAC,EAAAC,SAAAC,eAAA,WACAC,GAAAC,cAAA,OAAAL,GAAAA,GAAAC,EAGA,IAAAK,IAAA,SAAAC,GACA3C,EAAA2C,EACA3C,EAAA4C,QAAAA,EACA5C,EAAA6C,MAAAA,EACA7C,EAAA8C,KAAAA,GACAV,GAGA,QAAAQ,KAEAG,EAAA/C,EAAAgD,SAAAC,GAGA,QAAAJ,KACA,GAAAK,GAAAlD,EAAAmD,aAAAC,EAAAC,MAAAD,EAAAE,OAKAJ,GAAAK,OAAAC,iBAAA,YAAA,WACAC,GAAA,IAEAP,EAAAK,OAAAC,iBAAA,WAAA,WACAC,GAAA,IAIAzD,EAAA0D,WAAA,KACA1D,EAAA2D,SAAAZ,GACA/C,EAAA4D,SAAAC,GACA7D,EAAA8D,UAAA9D,EAAA+D,OAAA/D,EAAA+D,QACA/D,EAAAgE,OAAA,KACAhE,EAAAiE,KAAA,WACAjE,EAAAkE,aAAA,GACAlE,EAAAmE,KAAAA,EAAAnE,EAAAqD,MAAA,EAAArD,EAAAsD,OAAA,GAGAc,EAAA,GAAAC,GAAAtE,iBAAAC,GAAAA,EAAAsE,GAAA,EAAAtE,EAAAsE,GAAA,EAAA,KACAC,EAAA,GAAAF,GAAA5D,iBAAAT,EAAA,KAAA,IAAA,IAAA,GAAA,IAAA,KAGA,QAAA8C,KAEA,GAAAW,EAAA,CAIAe,IACAxE,EAAA0D,WAAA,KACAc,GAAA,EAIA,IAAAC,GAAAL,EAAA7C,WACAmD,EAAAH,EAAAhD,UAGAvB,GAAA2E,OACA3E,EAAA4E,UAAA5E,EAAAqD,MAAA,EAAAqB,EAAA9C,EAAA5B,EAAAsD,OAAA,EAAAoB,EAAA7C,GACA7B,EAAA6E,OAAAJ,GACAzE,EAAAmE,KAAAA,EAAA,EAAA,GACAnE,EAAA8E,OAtFAhF,EAAAJ,QAAAwC,CAGA,IAIAlC,GAAA+C,EAAAqB,EAAAG,EAJA/B,EAAApD,EAAA,iCACAiF,EAAAjF,EAAA,qCAIAoF,GAAA,EACAf,GAAA,EACAL,GACAC,MAAA,IACAC,OAAA,KAEAa,EAAA,SACAN,EAAA,IACAZ,EAAA,oDF0LG8B,oCAAoC,EAAEC,gCAAgC,IAAIC,GAAG,SAAS7F,EAAQU,EAAOJ,GG1MxGI,EAAAJ,QAAAwF,gBAAA,SAAAC,EAAAC,GACA,GAAAD,EACA,IAAA,GAAAE,KAAAF,GACAA,EAAAG,eAAAD,IACAD,EAAAC,EAAAF,EAAAE,GAAAF,IAIArF,EAAAJ,QAAA+C,cAAA,SAAA8C,EAAAC,EAAAC,GACA,GAAAC,GAAApD,SAAAG,cAAA8C,EASA,OARAC,KACAA,EAAAG,cAAAD,EAAAC,YAAAH,EAAAG,aACAH,EAAApD,KAAAsD,EAAAtD,GAAAoD,EAAApD,IACAoD,EAAAI,YAAAF,EAAAE,UAAAJ,EAAAI,WACAJ,EAAAK,OAAAC,SAAAJ,EAAAF,EAAAK,OACAL,EAAAO,YAAAC,cAAAN,EAAAF,EAAAO,aAEAN,GAAAA,EAAAQ,YAAAP,GACAA,GAGA5F,EAAAJ,QAAAoG,SAAA,SAAAI,EAAAL,GACAA,GACAX,gBAAAW,EAAA,SAAAR,EAAAc,GACAD,EAAAL,MAAAR,GAAAc,KAIArG,EAAAJ,QAAAsG,cAAA,SAAAE,EAAAH,GACAA,GACAb,gBAAAa,EAAA,SAAAV,EAAAc,GACAD,EAAAb,GAAAc,KAIArG,EAAAJ,QAAA0G,cAAA,SAAAF,GACAA,EAAAG,cAAAC,YAAAJ,cH6MW","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = {\r\n    NoiseGenerator1D: NoiseGenerator1D,\r\n    NoiseGenerator2D: NoiseGenerator2D\r\n};\r\n\r\n// -- 1D Noise Generator -------------------------------------------------------\r\n\r\n/**\r\n * A utility class for generating noise values\r\n * @constructor\r\n * @param {object} p               Reference to a p5 sketch\r\n * @param {number} [min=0]         Minimum value for the noise\r\n * @param {number} [max=1]         Maximum value for the noise\r\n * @param {number} [increment=0.1] Scale of the noise, used when updating\r\n * @param {number} [offset=random] A value used to ensure multiple noise\r\n *                                 generators are returning \"independent\" values\r\n */\r\nfunction NoiseGenerator1D(p, min, max, increment, offset) {\r\n    this.p = p;\r\n    this.min = (min !== undefined) ? min : 0;\r\n    this.max = (max !== undefined) ? max : 1;\r\n    this.increment = (increment !== undefined) ? increment : 0.1;\r\n    this.position = (offset !== undefined) ? p.random(-1000000, 1000000) : 0;\r\n}\r\n\r\n/**\r\n * Update the min and max noise values\r\n * @param  {number} min Minimum noise value\r\n * @param  {number} max Maximum noise value\r\n */\r\nNoiseGenerator1D.prototype.setBounds = function (min, max) {\r\n    if (min !== undefined) this.min = min;\r\n    if (max !== undefined) this.max = max;\r\n};\r\n\r\n/**\r\n * Update the noise increment (e.g. scale)\r\n * @param  {number} increment New increment (scale) value\r\n */\r\nNoiseGenerator1D.prototype.setIncrement = function (increment) {\r\n    if (increment !== undefined) this.increment = increment;\r\n};\r\n\r\n/** \r\n * Generate the next noise value\r\n * @return {number} A noisy value between object's min and max\r\n */\r\nNoiseGenerator1D.prototype.generate = function () {\r\n    this._update();\r\n    var n = this.p.noise(this.position);\r\n    n = this.p.map(n, 0, 1, this.min, this.max);\r\n    return n;\r\n};\r\n\r\n/**\r\n * Internal update method for generating next noise value\r\n * @private\r\n */\r\nNoiseGenerator1D.prototype._update = function () {\r\n    this.position += this.increment;\r\n};\r\n\r\n\r\n// -- 2D Noise Generator -------------------------------------------------------\r\n\r\nfunction NoiseGenerator2D(p, xMin, xMax, yMin, yMax, xIncrement, yIncrement, \r\n                          xOffset, yOffset) {\r\n    this.xNoise = new NoiseGenerator1D(p, xMin, xMax, xIncrement, xOffset);\r\n    this.yNoise = new NoiseGenerator1D(p, yMin, yMax, yIncrement, yOffset);\r\n    this.p = p;\r\n}\r\n\r\n/**\r\n * Update the min and max noise values\r\n * @param  {object} options Object with bounds to be updated e.g. \r\n *                          { xMin: 0, xMax: 1, yMin: -1, yMax: 1 }\r\n */\r\nNoiseGenerator2D.prototype.setBounds = function (options) {\r\n    if (!options) return;\r\n    if (options.xMin !== undefined) this.xMin = options.xMin;\r\n    if (options.xMax !== undefined) this.xMax = options.xMax;\r\n    if (options.yMin !== undefined) this.yMin = options.yMin;\r\n    if (options.yMax !== undefined) this.yMax = options.yMax;\r\n};\r\n\r\n/**\r\n * Update the increment (e.g. scale) for the noise generator\r\n * @param  {object} options Object with bounds to be updated e.g. \r\n *                          { xIncrement: 0.05, yIncrement: 0.1 }\r\n */\r\nNoiseGenerator2D.prototype.setBounds = function (options) {\r\n    if (!options) return;\r\n    if (options.xIncrement !== undefined) this.xNoise.setIncrement(\r\n                                                            options.xIncrement);\r\n    if (options.yIncrement !== undefined) this.yNoise.setIncrement(\r\n                                                            options.yIncrement);\r\n};\r\n\r\n/**\r\n * Generate the next pair of noise values\r\n * @return {object} Object with x and y properties that contain the next noise\r\n *                  values along each dimension\r\n */\r\nNoiseGenerator2D.prototype.generate = function () {\r\n    return {\r\n        x: this.xNoise.generate(),\r\n        y: this.yNoise.generate()\r\n    };\r\n};","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports = {\r\n    NoiseGenerator1D: NoiseGenerator1D,\r\n    NoiseGenerator2D: NoiseGenerator2D\r\n};\r\n\r\n// -- 1D Noise Generator -------------------------------------------------------\r\n\r\n/**\r\n * A utility class for generating noise values\r\n * @constructor\r\n * @param {object} p               Reference to a p5 sketch\r\n * @param {number} [min=0]         Minimum value for the noise\r\n * @param {number} [max=1]         Maximum value for the noise\r\n * @param {number} [increment=0.1] Scale of the noise, used when updating\r\n * @param {number} [offset=random] A value used to ensure multiple noise\r\n *                                 generators are returning \"independent\" values\r\n */\r\nfunction NoiseGenerator1D(p, min, max, increment, offset) {\r\n    this.p = p;\r\n    this.min = (min !== undefined) ? min : 0;\r\n    this.max = (max !== undefined) ? max : 1;\r\n    this.increment = (increment !== undefined) ? increment : 0.1;\r\n    this.position = (offset !== undefined) ? p.random(-1000000, 1000000) : 0;\r\n}\r\n\r\n/**\r\n * Update the min and max noise values\r\n * @param  {number} min Minimum noise value\r\n * @param  {number} max Maximum noise value\r\n */\r\nNoiseGenerator1D.prototype.setBounds = function (min, max) {\r\n    if (min !== undefined) this.min = min;\r\n    if (max !== undefined) this.max = max;\r\n};\r\n\r\n/**\r\n * Update the noise increment (e.g. scale)\r\n * @param  {number} increment New increment (scale) value\r\n */\r\nNoiseGenerator1D.prototype.setIncrement = function (increment) {\r\n    if (increment !== undefined) this.increment = increment;\r\n};\r\n\r\n/** \r\n * Generate the next noise value\r\n * @return {number} A noisy value between object's min and max\r\n */\r\nNoiseGenerator1D.prototype.generate = function () {\r\n    this._update();\r\n    var n = this.p.noise(this.position);\r\n    n = this.p.map(n, 0, 1, this.min, this.max);\r\n    return n;\r\n};\r\n\r\n/**\r\n * Internal update method for generating next noise value\r\n * @private\r\n */\r\nNoiseGenerator1D.prototype._update = function () {\r\n    this.position += this.increment;\r\n};\r\n\r\n\r\n// -- 2D Noise Generator -------------------------------------------------------\r\n\r\nfunction NoiseGenerator2D(p, xMin, xMax, yMin, yMax, xIncrement, yIncrement, \r\n                          xOffset, yOffset) {\r\n    this.xNoise = new NoiseGenerator1D(p, xMin, xMax, xIncrement, xOffset);\r\n    this.yNoise = new NoiseGenerator1D(p, yMin, yMax, yIncrement, yOffset);\r\n    this.p = p;\r\n}\r\n\r\n/**\r\n * Update the min and max noise values\r\n * @param  {object} options Object with bounds to be updated e.g. \r\n *                          { xMin: 0, xMax: 1, yMin: -1, yMax: 1 }\r\n */\r\nNoiseGenerator2D.prototype.setBounds = function (options) {\r\n    if (!options) return;\r\n    if (options.xMin !== undefined) this.xMin = options.xMin;\r\n    if (options.xMax !== undefined) this.xMax = options.xMax;\r\n    if (options.yMin !== undefined) this.yMin = options.yMin;\r\n    if (options.yMax !== undefined) this.yMax = options.yMax;\r\n};\r\n\r\n/**\r\n * Update the increment (e.g. scale) for the noise generator\r\n * @param  {object} options Object with bounds to be updated e.g. \r\n *                          { xIncrement: 0.05, yIncrement: 0.1 }\r\n */\r\nNoiseGenerator2D.prototype.setBounds = function (options) {\r\n    if (!options) return;\r\n    if (options.xIncrement !== undefined) this.xNoise.setIncrement(\r\n                                                            options.xIncrement);\r\n    if (options.yIncrement !== undefined) this.yNoise.setIncrement(\r\n                                                            options.yIncrement);\r\n};\r\n\r\n/**\r\n * Generate the next pair of noise values\r\n * @return {object} Object with x and y properties that contain the next noise\r\n *                  values along each dimension\r\n */\r\nNoiseGenerator2D.prototype.generate = function () {\r\n    return {\r\n        x: this.xNoise.generate(),\r\n        y: this.yNoise.generate()\r\n    };\r\n};\n},{}],2:[function(require,module,exports){\nvar noisyWordsSketch = require(\"./sketches/noisy-word.js\");\r\nnoisyWordsSketch();\n},{\"./sketches/noisy-word.js\":3}],3:[function(require,module,exports){\nmodule.exports = startSketch;\r\n\r\n// Modules\r\nvar Dom = require(\"../utilities/dom-utilities.js\");\r\nvar Noise = require(\"../generators/noise-generators.js\");\r\n\r\n// Globals\r\nvar p, font, rotationNoise, xyNoise;\r\nvar isFirstFrame = true;\r\nvar isMouseOver = false;\r\nvar canvasSize = {\r\n\twidth: 400,\r\n\theight: 150 \r\n};\r\nvar text = \"String\";\r\nvar fontSize = 120;\r\nvar fontPath = \"./assets/fonts/leaguegothic-regular-webfont.ttf\";\r\n\r\nfunction startSketch(containerID) {\t\r\n\t// Create div on page for the sketch\r\n\tvar id = \"noisy-word\";\r\n\tvar sketchesContainer = document.getElementById(\"sketches\");\r\n\tvar sketchDiv = Dom.createElement(\"div\", {id: id}, sketchesContainer);\r\n\r\n\t// Create a p5 instance inside of the ID specified\r\n\tnew p5(function (_p) {\r\n\t\tp = _p;\r\n\t\tp.preload = preload;\r\n\t\tp.setup = setup;\r\n\t\tp.draw = draw;\r\n\t}, id);\t\r\n}\r\n\r\nfunction preload() {\r\n\t// Load the font into a global - this way we can ask the font for a bbox\r\n\tfont = p.loadFont(fontPath);\r\n}\r\n\r\nfunction setup() {\r\n\tvar renderer = p.createCanvas(canvasSize.width, canvasSize.height);\r\n\r\n\t// There isn't a good way to check whether the sketch has the mouse over\r\n\t// it. p.mouseX & p.mouseY are initialized to (0, 0), and p.focused isn't \r\n\t// always reliable.\r\n\trenderer.canvas.addEventListener(\"mouseover\", function () {\r\n\t\tisMouseOver = true;\r\n\t});\r\n\trenderer.canvas.addEventListener(\"mouseout\", function () {\r\n\t\tisMouseOver = false;\r\n\t});\r\n\r\n\t// Draw the stationary text\r\n\tp.background(255);\r\n\tp.textFont(font);\r\n\tp.textSize(fontSize);\r\n\tp.textAlign(p.CENTER, p.CENTER);\r\n\tp.stroke(255);\r\n\tp.fill(\"#0A000A\");\r\n\tp.strokeWeight(2);\t\t\r\n\tp.text(text, p.width / 2, p.height / 2);\r\n\r\n\t// Set up noise generators\r\n\trotationNoise = new Noise.NoiseGenerator1D(p, -p.PI/4, p.PI/4, 0.02); \r\n\txyNoise = new Noise.NoiseGenerator2D(p, -100, 100, -50, 50, 0.01, 0.01);\r\n}\r\n\r\nfunction draw() {\r\n\t// No need to do anything if the mouse isn't over the sketch\r\n\tif (!isMouseOver) return;\r\n\r\n\t// When the text is about to become active for the first time, clear\r\n\t// the stationary logo that was drawn during setup. \r\n\tif (isFirstFrame) {\r\n\t\tp.background(255);\r\n\t\tisFirstFrame = false;\r\n\t}\r\n\r\n\t// Calculate position and rotation to create a jittery logo\r\n\tvar rotation = rotationNoise.generate();\r\n\tvar xyOffset = xyNoise.generate();\r\n\r\n\t// Draw the logo\r\n\tp.push();\r\n\t\tp.translate(p.width / 2 + xyOffset.x, p.height / 2 + xyOffset.y);\r\n\t\tp.rotate(rotation);\r\n\t\tp.text(text, 0, 0);\r\n\tp.pop();\r\n}\n},{\"../generators/noise-generators.js\":1,\"../utilities/dom-utilities.js\":4}],4:[function(require,module,exports){\nmodule.exports.forEachInObject = function (object, iterationFunction) {\r\n\tif (!object) return;\r\n\tfor (var key in object) {\r\n\t\tif (!object.hasOwnProperty(key)) continue;\r\n\t\titerationFunction(key, object[key], object);\r\n\t}\r\n};\r\n\r\nmodule.exports.createElement = function (tagName, parameters, parent) {\r\n\tvar el = document.createElement(tagName);\r\n\tif (parameters) {\r\n\t\tif (parameters.textContent) el.textContent = parameters.textContent;\r\n\t\tif (parameters.id) el.id = parameters.id;\r\n\t\tif (parameters.className) el.className = parameters.className;\r\n\t\tif (parameters.style) addStyle(el, parameters.style);\r\n\t\tif (parameters.attributes) addAttributes(el, parameters.attributes);\r\n\t}\t\r\n\tif (parent) parent.appendChild(el);\r\n\treturn el;\r\n};\r\n\r\nmodule.exports.addStyle = function (element, style) {\r\n\tif (!style) return;\r\n\tforEachInObject(style, function (key, val) {\r\n\t\telement.style[key] = val;\r\n\t});\t\r\n};\r\n\r\nmodule.exports.addAttributes = function (element, attributes) {\r\n\tif (!attributes) return;\r\n\tforEachInObject(attributes, function (key, val) {\r\n\t\telement[key] = val;\r\n\t});\t\r\n};\r\n\r\nmodule.exports.removeElement = function (element) {\r\n\telement.parentElement.removeChild(element);\r\n};\n},{}]},{},[2])\n\n","var noisyWordsSketch = require(\"./sketches/noisy-word.js\");\r\nnoisyWordsSketch();","module.exports = startSketch;\r\n\r\n// Modules\r\nvar Dom = require(\"../utilities/dom-utilities.js\");\r\nvar Noise = require(\"../generators/noise-generators.js\");\r\n\r\n// Globals\r\nvar p, font, rotationNoise, xyNoise;\r\nvar isFirstFrame = true;\r\nvar isMouseOver = false;\r\nvar canvasSize = {\r\n\twidth: 400,\r\n\theight: 150 \r\n};\r\nvar text = \"String\";\r\nvar fontSize = 120;\r\nvar fontPath = \"./assets/fonts/leaguegothic-regular-webfont.ttf\";\r\n\r\nfunction startSketch(containerID) {\t\r\n\t// Create div on page for the sketch\r\n\tvar id = \"noisy-word\";\r\n\tvar sketchesContainer = document.getElementById(\"sketches\");\r\n\tvar sketchDiv = Dom.createElement(\"div\", {id: id}, sketchesContainer);\r\n\r\n\t// Create a p5 instance inside of the ID specified\r\n\tnew p5(function (_p) {\r\n\t\tp = _p;\r\n\t\tp.preload = preload;\r\n\t\tp.setup = setup;\r\n\t\tp.draw = draw;\r\n\t}, id);\t\r\n}\r\n\r\nfunction preload() {\r\n\t// Load the font into a global - this way we can ask the font for a bbox\r\n\tfont = p.loadFont(fontPath);\r\n}\r\n\r\nfunction setup() {\r\n\tvar renderer = p.createCanvas(canvasSize.width, canvasSize.height);\r\n\r\n\t// There isn't a good way to check whether the sketch has the mouse over\r\n\t// it. p.mouseX & p.mouseY are initialized to (0, 0), and p.focused isn't \r\n\t// always reliable.\r\n\trenderer.canvas.addEventListener(\"mouseover\", function () {\r\n\t\tisMouseOver = true;\r\n\t});\r\n\trenderer.canvas.addEventListener(\"mouseout\", function () {\r\n\t\tisMouseOver = false;\r\n\t});\r\n\r\n\t// Draw the stationary text\r\n\tp.background(255);\r\n\tp.textFont(font);\r\n\tp.textSize(fontSize);\r\n\tp.textAlign(p.CENTER, p.CENTER);\r\n\tp.stroke(255);\r\n\tp.fill(\"#0A000A\");\r\n\tp.strokeWeight(2);\t\t\r\n\tp.text(text, p.width / 2, p.height / 2);\r\n\r\n\t// Set up noise generators\r\n\trotationNoise = new Noise.NoiseGenerator1D(p, -p.PI/4, p.PI/4, 0.02); \r\n\txyNoise = new Noise.NoiseGenerator2D(p, -100, 100, -50, 50, 0.01, 0.01);\r\n}\r\n\r\nfunction draw() {\r\n\t// No need to do anything if the mouse isn't over the sketch\r\n\tif (!isMouseOver) return;\r\n\r\n\t// When the text is about to become active for the first time, clear\r\n\t// the stationary logo that was drawn during setup. \r\n\tif (isFirstFrame) {\r\n\t\tp.background(255);\r\n\t\tisFirstFrame = false;\r\n\t}\r\n\r\n\t// Calculate position and rotation to create a jittery logo\r\n\tvar rotation = rotationNoise.generate();\r\n\tvar xyOffset = xyNoise.generate();\r\n\r\n\t// Draw the logo\r\n\tp.push();\r\n\t\tp.translate(p.width / 2 + xyOffset.x, p.height / 2 + xyOffset.y);\r\n\t\tp.rotate(rotation);\r\n\t\tp.text(text, 0, 0);\r\n\tp.pop();\r\n}","module.exports.forEachInObject = function (object, iterationFunction) {\r\n\tif (!object) return;\r\n\tfor (var key in object) {\r\n\t\tif (!object.hasOwnProperty(key)) continue;\r\n\t\titerationFunction(key, object[key], object);\r\n\t}\r\n};\r\n\r\nmodule.exports.createElement = function (tagName, parameters, parent) {\r\n\tvar el = document.createElement(tagName);\r\n\tif (parameters) {\r\n\t\tif (parameters.textContent) el.textContent = parameters.textContent;\r\n\t\tif (parameters.id) el.id = parameters.id;\r\n\t\tif (parameters.className) el.className = parameters.className;\r\n\t\tif (parameters.style) addStyle(el, parameters.style);\r\n\t\tif (parameters.attributes) addAttributes(el, parameters.attributes);\r\n\t}\t\r\n\tif (parent) parent.appendChild(el);\r\n\treturn el;\r\n};\r\n\r\nmodule.exports.addStyle = function (element, style) {\r\n\tif (!style) return;\r\n\tforEachInObject(style, function (key, val) {\r\n\t\telement.style[key] = val;\r\n\t});\t\r\n};\r\n\r\nmodule.exports.addAttributes = function (element, attributes) {\r\n\tif (!attributes) return;\r\n\tforEachInObject(attributes, function (key, val) {\r\n\t\telement[key] = val;\r\n\t});\t\r\n};\r\n\r\nmodule.exports.removeElement = function (element) {\r\n\telement.parentElement.removeChild(element);\r\n};"],"sourceRoot":"/source/"}