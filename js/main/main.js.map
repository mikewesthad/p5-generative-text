{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/p5-bbox-aligned-text/lib/bbox-aligned-text.js","main.js","src/js/generators/noise-generators.js","src/js/main.js","src/js/sketches/halftone-flashlight-word.js","src/js/sketches/noisy-word.js","src/js/utilities/dom-utilities.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","BboxAlignedText","font","text","fontSize","pInstance","this","_font","_text","_fontSize","undefined","p","window","_rotation","_hAlign","ALIGN","CENTER","_vAlign","BASELINE","_calculateMetrics","LEFT","RIGHT","BOX_TOP","BOX_CENTER","BOM_BOTTOM","FONT_CENTER","ALPHABETIC","prototype","setText","string","setTextSize","setRotation","angle","setAnchor","hAlign","vAlign","getBbox","x","y","pos","_calculateAlignedCoords","_boundsOffset","w","width","h","height","draw","drawBounds","push","_calculateRotatedCoords","rotate","textAlign","textFont","textSize","stroke","boundsX","boundsY","noFill","rect","pop","rx","Math","cos","PI","ry","sin","newX","newY","halfWidth","console","log","TOP","_distBaseToMid","BOTTOM","_distBaseToBottom","_descent","_ascent","shouldUpdateHeight","bounds","textBounds","_textAscent","_textDescent","halfHeight","abs","2","NoiseGenerator1D","min","max","increment","offset","position","random","NoiseGenerator2D","xMin","xMax","yMin","yMax","xIncrement","yIncrement","xOffset","yOffset","xNoise","yNoise","setBounds","setIncrement","generate","_update","noise","map","options","3","./sketches/halftone-flashlight-word.js","./sketches/noisy-word.js","4","startSketch","id","sketchesContainer","document","getElementById","dom","createElement","p5","_p","preload","setup","loadFont","fontPath","renderer","createCanvas","canvasSize","canvas","addEventListener","isMouseOver","background","bboxText","BboxText","noStroke","fill","bbox","startX","floor","endX","ceil","startY","endY","spacing","loadPixels","pixelDensity","circles","pixels","g","b","c","color","saturation","updatePixels","isFirstFrame","blendMode","BLEND","MULTIPLY","circle","dist","mouseX","mouseY","radius","ellipse","../generators/noise-generators.js","../utilities/dom-utilities.js","p5-bbox-aligned-text","5","strokeWeight","rotationNoise","Noise","xyNoise","rotation","xyOffset","translate","6","forEachInObject","object","iterationFunction","key","hasOwnProperty","tagName","parameters","parent","el","textContent","className","style","addStyle","attributes","addAttributes","appendChild","element","val","removeElement","parentElement","removeChild"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GC8BA,QAAAK,GAAAC,EAAAC,EAAAC,EAAAC,GACAC,KAAAC,MAAAL,EACAI,KAAAE,MAAAL,EACAG,KAAAG,UAAAC,SAAAN,EAAAA,EAAA,GACAE,KAAAK,EAAAN,GAAAO,OACAN,KAAAO,UAAA,EACAP,KAAAQ,QAAAb,EAAAc,MAAAC,OACAV,KAAAW,QAAAhB,EAAAiB,SAAAF,OACAV,KAAAa,mBAAA,GAtCAnB,EAAAJ,QAAAK,EAgDAA,EAAAc,OAEAK,KAAA,OAEAJ,OAAA,SAEAK,MAAA,SAUApB,EAAAiB,UAEAI,QAAA,MAEAC,WAAA,SAEAC,WAAA,SAKAC,YAAA,cAEAC,WAAA,cAQAzB,EAAA0B,UAAAC,QAAA,SAAAC,GACAvB,KAAAE,MAAAqB,EACAvB,KAAAa,mBAAA,IAQAlB,EAAA0B,UAAAG,YAAA,SAAA1B,GACAE,KAAAG,UAAAL,EACAE,KAAAa,mBAAA,IAQAlB,EAAA0B,UAAAI,YAAA,SAAAC,GACA1B,KAAAO,UAAAmB,GAUA/B,EAAA0B,UAAAM,UAAA,SAAAC,EAAAC,GACA7B,KAAAQ,QAAAoB,GAAAjC,EAAAc,MAAAC,OACAV,KAAAW,QAAAkB,GAAAlC,EAAAiB,SAAAF,QAUAf,EAAA0B,UAAAS,QAAA,SAAAC,EAAAC,GACA,GAAAC,GAAAjC,KAAAkC,wBAAAH,EAAAC,EACA,QACAD,EAAAE,EAAAF,EAAA/B,KAAAmC,cAAAJ,EACAC,EAAAC,EAAAD,EAAAhC,KAAAmC,cAAAH,EACAI,EAAApC,KAAAqC,MACAC,EAAAtC,KAAAuC,SAWA5C,EAAA0B,UAAAmB,KAAA,SAAAT,EAAAC,EAAAS,GACAA,EAAAA,IAAA,CACA,IAAAR,IACAF,EAAA3B,SAAA2B,EAAAA,EAAA,EACAC,EAAA5B,SAAA4B,EAAAA,EAAA,EAiBA,IAdAhC,KAAAK,EAAAqC,OAEA1C,KAAAO,YACA0B,EAAAjC,KAAA2C,wBAAAV,EAAAF,EAAAE,EAAAD,EAAAhC,KAAAO,WACAP,KAAAK,EAAAuC,OAAA5C,KAAAO,YAGA0B,EAAAjC,KAAAkC,wBAAAD,EAAAF,EAAAE,EAAAD,GAEAhC,KAAAK,EAAAwC,UAAA7C,KAAAK,EAAAS,KAAAd,KAAAK,EAAAO,UACAZ,KAAAK,EAAAyC,SAAA9C,KAAAC,OACAD,KAAAK,EAAA0C,SAAA/C,KAAAG,WACAH,KAAAK,EAAAR,KAAAG,KAAAE,MAAA+B,EAAAF,EAAAE,EAAAD,GAEAS,EAAA,CACAzC,KAAAK,EAAA2C,OAAA,IACA,IAAAC,GAAAhB,EAAAF,EAAA/B,KAAAmC,cAAAJ,EACAmB,EAAAjB,EAAAD,EAAAhC,KAAAmC,cAAAH,CACAhC,MAAAK,EAAA8C,SACAnD,KAAAK,EAAA+C,KAAAH,EAAAC,EAAAlD,KAAAqC,MAAArC,KAAAuC,QAGAvC,KAAAK,EAAAgD,OAWA1D,EAAA0B,UAAAsB,wBAAA,SAAAZ,EAAAC,EAAAN,GACA,GAAA4B,GAAAC,KAAAC,IAAA9B,GAAAK,EAAAwB,KAAAC,IAAAD,KAAAE,GAAA,EAAA/B,GAAAM,EACA0B,GAAAH,KAAAI,IAAAjC,GAAAK,EAAAwB,KAAAI,IAAAJ,KAAAE,GAAA,EAAA/B,GAAAM,CACA,QAAAD,EAAAuB,EAAAtB,EAAA0B,IAaA/D,EAAA0B,UAAAa,wBAAA,SAAAH,EAAAC,GACA,GAAA4B,GAAAC,CACA,QAAA7D,KAAAQ,SACA,IAAAb,GAAAc,MAAAK,KACA8C,EAAA7B,CACA,MACA,KAAApC,GAAAc,MAAAC,OACAkD,EAAA7B,EAAA/B,KAAA8D,SACA,MACA,KAAAnE,GAAAc,MAAAM,MACA6C,EAAA7B,EAAA/B,KAAAqC,KACA,MACA,SACAuB,EAAA7B,EACAgC,QAAAC,IAAA,gCAAAhE,KAAAQ,SAGA,OAAAR,KAAAW,SACA,IAAAhB,GAAAiB,SAAAqD,IACAJ,EAAA7B,EAAAhC,KAAAmC,cAAAH,CACA,MACA,KAAArC,GAAAiB,SAAAF,OACAmD,EAAA7B,EAAAhC,KAAAkE,cACA,MACA,KAAAvE,GAAAiB,SAAAuD,OACAN,EAAA7B,EAAAhC,KAAAoE,iBACA,MACA,KAAAzE,GAAAiB,SAAAO,YAEA0C,EAAA7B,EAAAhC,KAAAqE,UAAArE,KAAAsE,QAAAtE,KAAAqE,UAAA,CACA,MACA,KAAA1E,GAAAiB,SAAAQ,WACAyC,EAAA7B,CACA,MACA,SACA6B,EAAA7B,EACA+B,QAAAC,IAAA,+BAAAhE,KAAAW,SAGA,OAAAoB,EAAA6B,EAAA5B,EAAA6B,IAQAlE,EAAA0B,UAAAR,kBAAA,SAAA0D,GAGA,GAAAC,GAAAxE,KAAAC,MAAAwE,WAAAzE,KAAAE,MAAA,IAAA,IAAAF,KAAAG,UACAqE,GAAAzC,GAAA,IACAyC,EAAAxC,GAAA,IAEAuC,IACAvE,KAAAsE,QAAAtE,KAAAC,MAAAyE,YAAA1E,KAAAG,WACAH,KAAAqE,SAAArE,KAAAC,MAAA0E,aAAA3E,KAAAG,YAIAH,KAAAqC,MAAAmC,EAAApC,EACApC,KAAAuC,OAAAiC,EAAAlC,EACAtC,KAAA8D,UAAA9D,KAAAqC,MAAA,EACArC,KAAA4E,WAAA5E,KAAAuC,OAAA,EACAvC,KAAAmC,eAAAJ,EAAAyC,EAAAzC,EAAAC,EAAAwC,EAAAxC,GACAhC,KAAAkE,eAAAX,KAAAsB,IAAAL,EAAAxC,GAAAhC,KAAA4E,WACA5E,KAAAoE,kBAAApE,KAAAuC,OAAAgB,KAAAsB,IAAAL,EAAAxC,SCGM8C,GAAG,SAAS9F,EAAQU,EAAOJ,GC7PjC,QAAAyF,GAAA1E,EAAA2E,EAAAC,EAAAC,EAAAC,GACAnF,KAAAK,EAAAA,EACAL,KAAAgF,IAAA5E,SAAA4E,EAAAA,EAAA,EACAhF,KAAAiF,IAAA7E,SAAA6E,EAAAA,EAAA,EACAjF,KAAAkF,UAAA9E,SAAA8E,EAAAA,EAAA,GACAlF,KAAAoF,SAAAhF,SAAA+E,EAAA9E,EAAAgF,OAAA,KAAA,KAAA,EA2CA,QAAAC,GAAAjF,EAAAkF,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,GACA9F,KAAA+F,OAAA,GAAAhB,GAAA1E,EAAAkF,EAAAC,EAAAG,EAAAE,GACA7F,KAAAgG,OAAA,GAAAjB,GAAA1E,EAAAoF,EAAAC,EAAAE,EAAAE,GACA9F,KAAAK,EAAAA,EArEAX,EAAAJ,SACAyF,iBAAAA,EACAO,iBAAAA,GA4BAP,EAAA1D,UAAA4E,UAAA,SAAAjB,EAAAC,GACA7E,SAAA4E,IAAAhF,KAAAgF,IAAAA,GACA5E,SAAA6E,IAAAjF,KAAAiF,IAAAA,IAOAF,EAAA1D,UAAA6E,aAAA,SAAAhB,GACA9E,SAAA8E,IAAAlF,KAAAkF,UAAAA,IAOAH,EAAA1D,UAAA8E,SAAA,WACAnG,KAAAoG,SACA,IAAA1H,GAAAsB,KAAAK,EAAAgG,MAAArG,KAAAoF,SAEA,OADA1G,GAAAsB,KAAAK,EAAAiG,IAAA5H,EAAA,EAAA,EAAAsB,KAAAgF,IAAAhF,KAAAiF,MAQAF,EAAA1D,UAAA+E,QAAA,WACApG,KAAAoF,UAAApF,KAAAkF,WAkBAI,EAAAjE,UAAA4E,UAAA,SAAAM,GACAA,IACAnG,SAAAmG,EAAAhB,OAAAvF,KAAAuF,KAAAgB,EAAAhB,MACAnF,SAAAmG,EAAAf,OAAAxF,KAAAwF,KAAAe,EAAAf,MACApF,SAAAmG,EAAAd,OAAAzF,KAAAyF,KAAAc,EAAAd,MACArF,SAAAmG,EAAAb,OAAA1F,KAAA0F,KAAAa,EAAAb,QAQAJ,EAAAjE,UAAA4E,UAAA,SAAAM,GACAA,IACAnG,SAAAmG,EAAAZ,YAAA3F,KAAA+F,OAAAG,aACAK,EAAAZ,YACAvF,SAAAmG,EAAAX,YAAA5F,KAAAgG,OAAAE,aACAK,EAAAX,cAQAN,EAAAjE,UAAA8E,SAAA,WACA,OACApE,EAAA/B,KAAA+F,OAAAI,WACAnE,EAAAhC,KAAAgG,OAAAG,kBDkRMK,GAAG,SAASxH,EAAQU,EAAOJ,GE5XjCN,EAAA,8BACAA,EAAA,8CF8XGyH,yCAAyC,EAAEC,2BAA2B,IAAIC,GAAG,SAAS3H,EAAQU,EAAOJ,GG5WxG,QAAAsH,KAEA,GAAAC,GAAA,2BACAC,EAAAC,SAAAC,eAAA,WACAC,GAAAC,cAAA,OAAAL,GAAAA,GAAAC,EAGA,IAAAK,IAAA,SAAAC,GACA/G,EAAA+G,EACA/G,EAAAgH,QAAAA,EACAhH,EAAAiH,MAAAA,EACAjH,EAAAmC,KAAAA,GACAqE,GAGA,QAAAQ,KAEAzH,EAAAS,EAAAkH,SAAAC,GAGA,QAAAF,KACA,GAAAG,GAAApH,EAAAqH,aAAAC,EAAAtF,MAAAsF,EAAApF,OAKAkF,GAAAG,OAAAC,iBAAA,YAAA,WACAC,GAAA,IAEAL,EAAAG,OAAAC,iBAAA,WAAA,WACAC,GAAA,IAIAzH,EAAA0H,WAAA,KACA1H,EAAA0C,SAAAjD,GACAkI,EAAA,GAAAC,GAAArI,EAAAC,EAAAC,EAAAO,GACA2H,EAAArG,UAAAsG,EAAAxH,MAAAC,OAAAuH,EAAArH,SAAAO,aACAd,EAAA6H,WACA7H,EAAA8H,KAAA,WACAH,EAAAxF,KAAAnC,EAAAgC,MAAA,EAAAhC,EAAAkC,OAAA,EAIA,IAAA6F,GAAAJ,EAAAlG,QAAAzB,EAAAgC,MAAA,EAAAhC,EAAAkC,OAAA,GACA8F,EAAA9E,KAAA+E,MAAA/E,KAAA0B,IAAAmD,EAAArG,EAAA,EAAA,IACAwG,EAAAhF,KAAAiF,KAAAjF,KAAAyB,IAAAoD,EAAArG,EAAAqG,EAAAhG,EAAA,EAAA/B,EAAAgC,QACAoG,EAAAlF,KAAA+E,MAAA/E,KAAA0B,IAAAmD,EAAApG,EAAA,EAAA,IACA0G,EAAAnF,KAAAiF,KAAAjF,KAAAyB,IAAAoD,EAAApG,EAAAoG,EAAA9F,EAAA,EAAAjC,EAAAkC,SACAoG,EAAA,CACAtI,GAAAuI,aACAvI,EAAAwI,aAAA,GACAC,IACA,KAAA,GAAA9G,GAAAyG,EAAAC,EAAA1G,EAAAA,GAAA2G,EACA,IAAA,GAAA5G,GAAAsG,EAAAE,EAAAxG,EAAAA,GAAA4G,EAAA,CACA,GAAA1J,GAAA,GAAA+C,EAAA3B,EAAAgC,MAAAN,GACApD,EAAA0B,EAAA0I,OAAA9J,GACA+J,EAAA3I,EAAA0I,OAAA9J,EAAA,GACAgK,EAAA5I,EAAA0I,OAAA9J,EAAA,GACAF,EAAAsB,EAAA0I,OAAA9J,EAAA,GACAiK,EAAA7I,EAAA8I,MAAAxK,EAAAqK,EAAAC,EAAAlK,EACAsB,GAAA+I,WAAAF,GAAA,IACAJ,EAAApG,MACAX,EAAAA,EAAA1B,EAAAgF,OAAA,GAAA,EAAAsD,EAAA,EAAA,EAAAA,GACA3G,EAAAA,EAAA3B,EAAAgF,OAAA,GAAA,EAAAsD,EAAA,EAAA,EAAAA,GACAQ,MAAA9I,EAAA8I,MAAA,aAEAL,EAAApG,MACAX,EAAAA,EAAA1B,EAAAgF,OAAA,GAAA,EAAAsD,EAAA,EAAA,EAAAA,GACA3G,EAAAA,EAAA3B,EAAAgF,OAAA,GAAA,EAAAsD,EAAA,EAAA,EAAAA,GACAQ,MAAA9I,EAAA8I,MAAA,aAEAL,EAAApG,MACAX,EAAAA,EAAA1B,EAAAgF,OAAA,GAAA,EAAAsD,EAAA,EAAA,EAAAA,GACA3G,EAAAA,EAAA3B,EAAAgF,OAAA,GAAA,EAAAsD,EAAA,EAAA,EAAAA,GACAQ,MAAA9I,EAAA8I,MAAA,cAKA9I,EAAAgJ,eAGA,QAAA7G,KAEA,GAAAsF,EAAA,CAIAwB,IACAjJ,EAAA0H,WAAA,KACAuB,GAAA,GAIAjJ,EAAAkJ,UAAAlJ,EAAAmJ,OACAnJ,EAAA0H,WAAA,KAGA1H,EAAA6H,WACA7H,EAAAkJ,UAAAlJ,EAAAoJ,SACA,KAAA,GAAAxK,GAAA,EAAAA,EAAA6J,EAAAtJ,OAAAP,GAAA,EAAA,CACA,GAAAyK,GAAAZ,EAAA7J,GACAiK,EAAAQ,EAAAP,MACAQ,EAAAtJ,EAAAsJ,KAAAD,EAAA3H,EAAA2H,EAAA1H,EAAA3B,EAAAuJ,OAAAvJ,EAAAwJ,QACAC,EAAAzJ,EAAAiG,IAAAqD,EAAA,EAAA,IAAA,EAAA,GACAtJ,GAAA8H,KAAAe,GACA7I,EAAA0J,QAAAL,EAAA3H,EAAA2H,EAAA1H,EAAA8H,EAAAA,KA9HApK,EAAAJ,QAAAsH,CAGA,IAKAvG,GAAAT,EAAAkJ,EAAAd,EALAf,EAAAjI,EAAA,iCAEAiJ,GADAjJ,EAAA,qCACAA,EAAA,yBAIAsK,GAAA,EACAxB,GAAA,EACAH,GACAtF,MAAA,IACAE,OAAA,KAEA1C,EAAA,WACAC,EAAA,IACA0H,EAAA,oDHgfGwC,oCAAoC,EAAEC,gCAAgC,EAAEC,uBAAuB,IAAIC,GAAG,SAASnL,EAAQU,EAAOJ,GI/ejI,QAAAsH,KAEA,GAAAC,GAAA,aACAC,EAAAC,SAAAC,eAAA,WACAC,GAAAC,cAAA,OAAAL,GAAAA,GAAAC,EAGA,IAAAK,IAAA,SAAAC,GACA/G,EAAA+G,EACA/G,EAAAgH,QAAAA,EACAhH,EAAAiH,MAAAA,EACAjH,EAAAmC,KAAAA,GACAqE,GAGA,QAAAQ,KAEAzH,EAAAS,EAAAkH,SAAAC,GAGA,QAAAF,KACA,GAAAG,GAAApH,EAAAqH,aAAAC,EAAAtF,MAAAsF,EAAApF,OAKAkF,GAAAG,OAAAC,iBAAA,YAAA,WACAC,GAAA,IAEAL,EAAAG,OAAAC,iBAAA,WAAA,WACAC,GAAA,IAIAzH,EAAA0H,WAAA,KACA1H,EAAAyC,SAAAlD,GACAS,EAAA0C,SAAAjD,GACAO,EAAAwC,UAAAxC,EAAAK,OAAAL,EAAAK,QACAL,EAAA2C,OAAA,KACA3C,EAAA8H,KAAA,WACA9H,EAAA+J,aAAA,GACA/J,EAAAR,KAAAA,EAAAQ,EAAAgC,MAAA,EAAAhC,EAAAkC,OAAA,GAGA8H,EAAA,GAAAC,GAAAvF,iBAAA1E,GAAAA,EAAAoD,GAAA,EAAApD,EAAAoD,GAAA,EAAA,KACA8G,EAAA,GAAAD,GAAAhF,iBAAAjF,EAAA,KAAA,IAAA,IAAA,GAAA,IAAA,KAGA,QAAAmC,KAEA,GAAAsF,EAAA,CAIAwB,IACAjJ,EAAA0H,WAAA,KACAuB,GAAA,EAIA,IAAAkB,GAAAH,EAAAlE,WACAsE,EAAAF,EAAApE,UAGA9F,GAAAqC,OACArC,EAAAqK,UAAArK,EAAAgC,MAAA,EAAAoI,EAAA1I,EAAA1B,EAAAkC,OAAA,EAAAkI,EAAAzI,GACA3B,EAAAuC,OAAA4H,GACAnK,EAAAR,KAAAA,EAAA,EAAA,GACAQ,EAAAgD,OAtFA3D,EAAAJ,QAAAsH,CAGA,IAIAvG,GAAAT,EAAAyK,EAAAE,EAJAtD,EAAAjI,EAAA,iCACAsL,EAAAtL,EAAA,qCAIAsK,GAAA,EACAxB,GAAA,EACAH,GACAtF,MAAA,IACAE,OAAA,KAEA1C,EAAA,WACAC,EAAA,IACA0H,EAAA,oDJ0kBGwC,oCAAoC,EAAEC,gCAAgC,IAAIU,GAAG,SAAS3L,EAAQU,EAAOJ,GK1lBxGI,EAAAJ,QAAAsL,gBAAA,SAAAC,EAAAC,GACA,GAAAD,EACA,IAAA,GAAAE,KAAAF,GACAA,EAAAG,eAAAD,IACAD,EAAAC,EAAAF,EAAAE,GAAAF,IAIAnL,EAAAJ,QAAA4H,cAAA,SAAA+D,EAAAC,EAAAC,GACA,GAAAC,GAAArE,SAAAG,cAAA+D,EASA,OARAC,KACAA,EAAAG,cAAAD,EAAAC,YAAAH,EAAAG,aACAH,EAAArE,KAAAuE,EAAAvE,GAAAqE,EAAArE,IACAqE,EAAAI,YAAAF,EAAAE,UAAAJ,EAAAI,WACAJ,EAAAK,OAAAC,SAAAJ,EAAAF,EAAAK,OACAL,EAAAO,YAAAC,cAAAN,EAAAF,EAAAO,aAEAN,GAAAA,EAAAQ,YAAAP,GACAA,GAGA1L,EAAAJ,QAAAkM,SAAA,SAAAI,EAAAL,GACAA,GACAX,gBAAAW,EAAA,SAAAR,EAAAc,GACAD,EAAAL,MAAAR,GAAAc,KAIAnM,EAAAJ,QAAAoM,cAAA,SAAAE,EAAAH,GACAA,GACAb,gBAAAa,EAAA,SAAAV,EAAAc,GACAD,EAAAb,GAAAc,KAIAnM,EAAAJ,QAAAwM,cAAA,SAAAF,GACAA,EAAAG,cAAAC,YAAAJ,cL6lBW","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = BboxAlignedText;\r\n\r\n/**\r\n * Creates a new BboxAlignedText object - a text object that can be drawn with\r\n * anchor points based on a tight bounding box around the text.\r\n * @constructor\r\n * @param {object} font               p5.Font object\r\n * @param {string} text               String to display\r\n * @param {number} [fontSize=12]      Font size to use for string\r\n * @param {object} [pInstance=window] Reference to p5 instance, leave blank if\r\n *                                    sketch is global\r\n * @example\r\n * var font, bboxText;\r\n * function preload() {\r\n *     font = loadFont(\"./assets/Regular.ttf\");\r\n * }\r\n * function setup() {\r\n *     createCanvas(400, 600);\r\n *     background(0);\r\n *     \r\n *     bboxText = new BboxAlignedText(font, \"Hey!\", 30);    \r\n *     bboxText.setRotation(PI / 4);\r\n *     bboxText.setAnchor(BboxAlignedText.ALIGN.CENTER, \r\n *                        BboxAlignedText.BASELINE.CENTER);\r\n *     \r\n *     fill(\"#00A8EA\");\r\n *     noStroke();\r\n *     bboxText.draw(width / 2, height / 2, true);\r\n * }\r\n */\r\nfunction BboxAlignedText(font, text, fontSize, pInstance) {\r\n    this._font = font;\r\n    this._text = text;\r\n    this._fontSize = (fontSize !== undefined) ? fontSize : 12;\r\n    this.p = pInstance || window; // If instance is omitted, assume global scope\r\n    this._rotation = 0;\r\n    this._hAlign = BboxAlignedText.ALIGN.CENTER;\r\n    this._vAlign = BboxAlignedText.BASELINE.CENTER;\r\n    this._calculateMetrics(true);\r\n}\r\n\r\n/**\r\n * Vertical alignment values\r\n * @public\r\n * @static\r\n * @readonly\r\n * @enum {string}\r\n */\r\nBboxAlignedText.ALIGN = {\r\n    /** Draw from the left of the bbox */\r\n    LEFT: \"left\",\r\n    /** Draw from the center of the bbox */\r\n    CENTER: \"center\",\r\n    /** Draw from the right of the bbox */\r\n    RIGHT: \"right\"\r\n};\r\n\r\n/**\r\n * Baseline alignment values\r\n * @public\r\n * @static\r\n * @readonly\r\n * @enum {string}\r\n */\r\nBboxAlignedText.BASELINE = {\r\n    /** Draw from the top of the bbox */\r\n    BOX_TOP: \"top\",\r\n    /** Draw from the center of the bbox */\r\n    BOX_CENTER: \"center\",\r\n    /** Draw from the bottom of the bbox */\r\n    BOM_BOTTOM: \"bottom\",\r\n    /** \r\n     * Draw from half the height of the font. Specifically the height is\r\n     * calculated as: ascent + descent.\r\n     */\r\n    FONT_CENTER: \"font_center\",\r\n    /** Draw from the the normal font baseline */\r\n    ALPHABETIC: \"alphabetic\"\r\n};\r\n\r\n/**\r\n * Set current text\r\n * @public\r\n * @param {string} string Text string to display\r\n */\r\nBboxAlignedText.prototype.setText = function(string) {\r\n    this._text = string;\r\n    this._calculateMetrics(false);\r\n};\r\n\r\n/**\r\n * Set current text size\r\n * @public\r\n * @param {number} fontSize Text size\r\n */\r\nBboxAlignedText.prototype.setTextSize = function(fontSize) {\r\n    this._fontSize = fontSize;\r\n    this._calculateMetrics(true);\r\n};\r\n\r\n/**\r\n * Set rotation of text\r\n * @public\r\n * @param {number} angle Rotation in radians\r\n */\r\nBboxAlignedText.prototype.setRotation = function(angle) {\r\n    this._rotation = angle;\r\n};\r\n\r\n/**\r\n * Set anchor point for text (horizonal and vertical alignment) relative to\r\n * bounding box\r\n * @public\r\n * @param {string} [hAlign=CENTER] Horizonal alignment\r\n * @param {string} [vAlign=CENTER] Vertical baseline\r\n */\r\nBboxAlignedText.prototype.setAnchor = function(hAlign, vAlign) {\r\n    this._hAlign = hAlign || BboxAlignedText.ALIGN.CENTER;\r\n    this._vAlign = vAlign || BboxAlignedText.BASELINE.CENTER;\r\n};\r\n\r\n/**\r\n * Get the bounding box when the text is placed at the specified coordinates.\r\n * Note: this is the unrotated bounding box!\r\n * @param  {number} x X coordinate\r\n * @param  {number} y Y coordinate\r\n * @return {object}   Returns an object with properties: x, y, w, h\r\n */\r\nBboxAlignedText.prototype.getBbox = function(x, y) {\r\n    var pos = this._calculateAlignedCoords(x, y);\r\n    return {\r\n        x: pos.x + this._boundsOffset.x,\r\n        y: pos.y + this._boundsOffset.y,\r\n        w: this.width,\r\n        h: this.height\r\n    };\r\n};\r\n\r\n/**\r\n * Draws the text particle with the specified style parameters\r\n * @public\r\n * @param  {number}  x                  X coordinate of text anchor\r\n * @param  {number}  y                  Y coordinate of text anchor\r\n * @param  {boolean} [drawBounds=false] Flag for drawing bounding box\r\n */\r\nBboxAlignedText.prototype.draw = function(x, y, drawBounds) {\r\n    drawBounds = drawBounds || false;\r\n    var pos = {\r\n        x: (x !== undefined) ? x : 0, \r\n        y: (y !== undefined) ? y : 0\r\n    };\r\n\r\n    this.p.push();\r\n\r\n        if (this._rotation) {\r\n            pos = this._calculateRotatedCoords(pos.x, pos.y, this._rotation);\r\n            this.p.rotate(this._rotation);\r\n        }\r\n\r\n        pos = this._calculateAlignedCoords(pos.x, pos.y);\r\n\r\n        this.p.textAlign(this.p.LEFT, this.p.BASELINE);\r\n        this.p.textFont(this._font);\r\n        this.p.textSize(this._fontSize);\r\n        this.p.text(this._text, pos.x, pos.y);\r\n\r\n        if (drawBounds) {\r\n            this.p.stroke(200);\r\n            var boundsX = pos.x + this._boundsOffset.x;\r\n            var boundsY = pos.y + this._boundsOffset.y;\r\n            this.p.noFill();\r\n            this.p.rect(boundsX, boundsY, this.width, this.height);            \r\n        }\r\n\r\n    this.p.pop();\r\n};\r\n\r\n/**\r\n * Project the coordinates (x, y) into a rotated coordinate system\r\n * @private\r\n * @param  {number} x     X coordinate (in unrotated space)\r\n * @param  {number} y     Y coordinate (in unrotated space)\r\n * @param  {number} angle Radians of rotation to apply\r\n * @return {object}       Object with x & y properties\r\n */\r\nBboxAlignedText.prototype._calculateRotatedCoords = function (x, y, angle) {  \r\n    var rx = Math.cos(angle) * x + Math.cos(Math.PI / 2 - angle) * y;\r\n    var ry = -Math.sin(angle) * x + Math.sin(Math.PI / 2 - angle) * y;\r\n    return {x: rx, y: ry};\r\n};\r\n\r\n/**\r\n * Calculates draw coordinates for the text, aligning based on the bounding box.\r\n * The text is eventually drawn with canvas alignment set to left & baseline, so\r\n * this function takes a desired pos & alignment and returns the appropriate\r\n * coordinates for the left & baseline.\r\n * @private\r\n * @param  {number} x      X coordinate\r\n * @param  {number} y      Y coordinate\r\n * @return {object}        Object with x & y properties\r\n */\r\nBboxAlignedText.prototype._calculateAlignedCoords = function(x, y) {\r\n    var newX, newY;\r\n    switch (this._hAlign) {\r\n        case BboxAlignedText.ALIGN.LEFT:\r\n            newX = x;\r\n            break;\r\n        case BboxAlignedText.ALIGN.CENTER:\r\n            newX = x - this.halfWidth;\r\n            break;\r\n        case BboxAlignedText.ALIGN.RIGHT:\r\n            newX = x - this.width;\r\n            break;\r\n        default:\r\n            newX = x;\r\n            console.log(\"Unrecognized horizonal align:\", this._hAlign);\r\n            break;\r\n    }\r\n    switch (this._vAlign) {\r\n        case BboxAlignedText.BASELINE.TOP:\r\n            newY = y - this._boundsOffset.y;\r\n            break;\r\n        case BboxAlignedText.BASELINE.CENTER:\r\n            newY = y + this._distBaseToMid;\r\n            break;\r\n        case BboxAlignedText.BASELINE.BOTTOM:\r\n            newY = y - this._distBaseToBottom;\r\n            break;\r\n        case BboxAlignedText.BASELINE.FONT_CENTER:\r\n            // Height is approximated as ascent + descent\r\n            newY = y - this._descent + (this._ascent + this._descent) / 2;\r\n            break;\r\n        case BboxAlignedText.BASELINE.ALPHABETIC:\r\n            newY = y;\r\n            break;\r\n        default:\r\n            newY = y;\r\n            console.log(\"Unrecognized vertical align:\", this._vAlign);\r\n            break;\r\n    }\r\n    return {x: newX, y: newY};\r\n};\r\n\r\n\r\n/**\r\n * Calculates bounding box and various metrics for the current text and font\r\n * @private\r\n */\r\nBboxAlignedText.prototype._calculateMetrics = function(shouldUpdateHeight) {  \r\n    // p5 0.5.0 has a bug - text bounds are clipped by (0, 0)\r\n    // Calculating bounds hack\r\n    var bounds = this._font.textBounds(this._text, 1000, 1000, this._fontSize);\r\n    bounds.x -= 1000;\r\n    bounds.y -= 1000;\r\n\r\n    if (shouldUpdateHeight) {\r\n        this._ascent = this._font._textAscent(this._fontSize);\r\n        this._descent = this._font._textDescent(this._fontSize);\r\n    }\r\n\r\n    // Use bounds to calculate font metrics\r\n    this.width = bounds.w;\r\n    this.height = bounds.h;\r\n    this.halfWidth = this.width / 2;\r\n    this.halfHeight = this.height / 2;\r\n    this._boundsOffset = {x: bounds.x, y: bounds.y};\r\n    this._distBaseToMid = Math.abs(bounds.y) - this.halfHeight;\r\n    this._distBaseToBottom = this.height - Math.abs(bounds.y);\r\n};","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports = BboxAlignedText;\r\n\r\n/**\r\n * Creates a new BboxAlignedText object - a text object that can be drawn with\r\n * anchor points based on a tight bounding box around the text.\r\n * @constructor\r\n * @param {object} font               p5.Font object\r\n * @param {string} text               String to display\r\n * @param {number} [fontSize=12]      Font size to use for string\r\n * @param {object} [pInstance=window] Reference to p5 instance, leave blank if\r\n *                                    sketch is global\r\n * @example\r\n * var font, bboxText;\r\n * function preload() {\r\n *     font = loadFont(\"./assets/Regular.ttf\");\r\n * }\r\n * function setup() {\r\n *     createCanvas(400, 600);\r\n *     background(0);\r\n *     \r\n *     bboxText = new BboxAlignedText(font, \"Hey!\", 30);    \r\n *     bboxText.setRotation(PI / 4);\r\n *     bboxText.setAnchor(BboxAlignedText.ALIGN.CENTER, \r\n *                        BboxAlignedText.BASELINE.CENTER);\r\n *     \r\n *     fill(\"#00A8EA\");\r\n *     noStroke();\r\n *     bboxText.draw(width / 2, height / 2, true);\r\n * }\r\n */\r\nfunction BboxAlignedText(font, text, fontSize, pInstance) {\r\n    this._font = font;\r\n    this._text = text;\r\n    this._fontSize = (fontSize !== undefined) ? fontSize : 12;\r\n    this.p = pInstance || window; // If instance is omitted, assume global scope\r\n    this._rotation = 0;\r\n    this._hAlign = BboxAlignedText.ALIGN.CENTER;\r\n    this._vAlign = BboxAlignedText.BASELINE.CENTER;\r\n    this._calculateMetrics(true);\r\n}\r\n\r\n/**\r\n * Vertical alignment values\r\n * @public\r\n * @static\r\n * @readonly\r\n * @enum {string}\r\n */\r\nBboxAlignedText.ALIGN = {\r\n    /** Draw from the left of the bbox */\r\n    LEFT: \"left\",\r\n    /** Draw from the center of the bbox */\r\n    CENTER: \"center\",\r\n    /** Draw from the right of the bbox */\r\n    RIGHT: \"right\"\r\n};\r\n\r\n/**\r\n * Baseline alignment values\r\n * @public\r\n * @static\r\n * @readonly\r\n * @enum {string}\r\n */\r\nBboxAlignedText.BASELINE = {\r\n    /** Draw from the top of the bbox */\r\n    BOX_TOP: \"top\",\r\n    /** Draw from the center of the bbox */\r\n    BOX_CENTER: \"center\",\r\n    /** Draw from the bottom of the bbox */\r\n    BOM_BOTTOM: \"bottom\",\r\n    /** \r\n     * Draw from half the height of the font. Specifically the height is\r\n     * calculated as: ascent + descent.\r\n     */\r\n    FONT_CENTER: \"font_center\",\r\n    /** Draw from the the normal font baseline */\r\n    ALPHABETIC: \"alphabetic\"\r\n};\r\n\r\n/**\r\n * Set current text\r\n * @public\r\n * @param {string} string Text string to display\r\n */\r\nBboxAlignedText.prototype.setText = function(string) {\r\n    this._text = string;\r\n    this._calculateMetrics(false);\r\n};\r\n\r\n/**\r\n * Set current text size\r\n * @public\r\n * @param {number} fontSize Text size\r\n */\r\nBboxAlignedText.prototype.setTextSize = function(fontSize) {\r\n    this._fontSize = fontSize;\r\n    this._calculateMetrics(true);\r\n};\r\n\r\n/**\r\n * Set rotation of text\r\n * @public\r\n * @param {number} angle Rotation in radians\r\n */\r\nBboxAlignedText.prototype.setRotation = function(angle) {\r\n    this._rotation = angle;\r\n};\r\n\r\n/**\r\n * Set anchor point for text (horizonal and vertical alignment) relative to\r\n * bounding box\r\n * @public\r\n * @param {string} [hAlign=CENTER] Horizonal alignment\r\n * @param {string} [vAlign=CENTER] Vertical baseline\r\n */\r\nBboxAlignedText.prototype.setAnchor = function(hAlign, vAlign) {\r\n    this._hAlign = hAlign || BboxAlignedText.ALIGN.CENTER;\r\n    this._vAlign = vAlign || BboxAlignedText.BASELINE.CENTER;\r\n};\r\n\r\n/**\r\n * Get the bounding box when the text is placed at the specified coordinates.\r\n * Note: this is the unrotated bounding box!\r\n * @param  {number} x X coordinate\r\n * @param  {number} y Y coordinate\r\n * @return {object}   Returns an object with properties: x, y, w, h\r\n */\r\nBboxAlignedText.prototype.getBbox = function(x, y) {\r\n    var pos = this._calculateAlignedCoords(x, y);\r\n    return {\r\n        x: pos.x + this._boundsOffset.x,\r\n        y: pos.y + this._boundsOffset.y,\r\n        w: this.width,\r\n        h: this.height\r\n    };\r\n};\r\n\r\n/**\r\n * Draws the text particle with the specified style parameters\r\n * @public\r\n * @param  {number}  x                  X coordinate of text anchor\r\n * @param  {number}  y                  Y coordinate of text anchor\r\n * @param  {boolean} [drawBounds=false] Flag for drawing bounding box\r\n */\r\nBboxAlignedText.prototype.draw = function(x, y, drawBounds) {\r\n    drawBounds = drawBounds || false;\r\n    var pos = {\r\n        x: (x !== undefined) ? x : 0, \r\n        y: (y !== undefined) ? y : 0\r\n    };\r\n\r\n    this.p.push();\r\n\r\n        if (this._rotation) {\r\n            pos = this._calculateRotatedCoords(pos.x, pos.y, this._rotation);\r\n            this.p.rotate(this._rotation);\r\n        }\r\n\r\n        pos = this._calculateAlignedCoords(pos.x, pos.y);\r\n\r\n        this.p.textAlign(this.p.LEFT, this.p.BASELINE);\r\n        this.p.textFont(this._font);\r\n        this.p.textSize(this._fontSize);\r\n        this.p.text(this._text, pos.x, pos.y);\r\n\r\n        if (drawBounds) {\r\n            this.p.stroke(200);\r\n            var boundsX = pos.x + this._boundsOffset.x;\r\n            var boundsY = pos.y + this._boundsOffset.y;\r\n            this.p.noFill();\r\n            this.p.rect(boundsX, boundsY, this.width, this.height);            \r\n        }\r\n\r\n    this.p.pop();\r\n};\r\n\r\n/**\r\n * Project the coordinates (x, y) into a rotated coordinate system\r\n * @private\r\n * @param  {number} x     X coordinate (in unrotated space)\r\n * @param  {number} y     Y coordinate (in unrotated space)\r\n * @param  {number} angle Radians of rotation to apply\r\n * @return {object}       Object with x & y properties\r\n */\r\nBboxAlignedText.prototype._calculateRotatedCoords = function (x, y, angle) {  \r\n    var rx = Math.cos(angle) * x + Math.cos(Math.PI / 2 - angle) * y;\r\n    var ry = -Math.sin(angle) * x + Math.sin(Math.PI / 2 - angle) * y;\r\n    return {x: rx, y: ry};\r\n};\r\n\r\n/**\r\n * Calculates draw coordinates for the text, aligning based on the bounding box.\r\n * The text is eventually drawn with canvas alignment set to left & baseline, so\r\n * this function takes a desired pos & alignment and returns the appropriate\r\n * coordinates for the left & baseline.\r\n * @private\r\n * @param  {number} x      X coordinate\r\n * @param  {number} y      Y coordinate\r\n * @return {object}        Object with x & y properties\r\n */\r\nBboxAlignedText.prototype._calculateAlignedCoords = function(x, y) {\r\n    var newX, newY;\r\n    switch (this._hAlign) {\r\n        case BboxAlignedText.ALIGN.LEFT:\r\n            newX = x;\r\n            break;\r\n        case BboxAlignedText.ALIGN.CENTER:\r\n            newX = x - this.halfWidth;\r\n            break;\r\n        case BboxAlignedText.ALIGN.RIGHT:\r\n            newX = x - this.width;\r\n            break;\r\n        default:\r\n            newX = x;\r\n            console.log(\"Unrecognized horizonal align:\", this._hAlign);\r\n            break;\r\n    }\r\n    switch (this._vAlign) {\r\n        case BboxAlignedText.BASELINE.TOP:\r\n            newY = y - this._boundsOffset.y;\r\n            break;\r\n        case BboxAlignedText.BASELINE.CENTER:\r\n            newY = y + this._distBaseToMid;\r\n            break;\r\n        case BboxAlignedText.BASELINE.BOTTOM:\r\n            newY = y - this._distBaseToBottom;\r\n            break;\r\n        case BboxAlignedText.BASELINE.FONT_CENTER:\r\n            // Height is approximated as ascent + descent\r\n            newY = y - this._descent + (this._ascent + this._descent) / 2;\r\n            break;\r\n        case BboxAlignedText.BASELINE.ALPHABETIC:\r\n            newY = y;\r\n            break;\r\n        default:\r\n            newY = y;\r\n            console.log(\"Unrecognized vertical align:\", this._vAlign);\r\n            break;\r\n    }\r\n    return {x: newX, y: newY};\r\n};\r\n\r\n\r\n/**\r\n * Calculates bounding box and various metrics for the current text and font\r\n * @private\r\n */\r\nBboxAlignedText.prototype._calculateMetrics = function(shouldUpdateHeight) {  \r\n    // p5 0.5.0 has a bug - text bounds are clipped by (0, 0)\r\n    // Calculating bounds hack\r\n    var bounds = this._font.textBounds(this._text, 1000, 1000, this._fontSize);\r\n    bounds.x -= 1000;\r\n    bounds.y -= 1000;\r\n\r\n    if (shouldUpdateHeight) {\r\n        this._ascent = this._font._textAscent(this._fontSize);\r\n        this._descent = this._font._textDescent(this._fontSize);\r\n    }\r\n\r\n    // Use bounds to calculate font metrics\r\n    this.width = bounds.w;\r\n    this.height = bounds.h;\r\n    this.halfWidth = this.width / 2;\r\n    this.halfHeight = this.height / 2;\r\n    this._boundsOffset = {x: bounds.x, y: bounds.y};\r\n    this._distBaseToMid = Math.abs(bounds.y) - this.halfHeight;\r\n    this._distBaseToBottom = this.height - Math.abs(bounds.y);\r\n};\n},{}],2:[function(require,module,exports){\nmodule.exports = {\r\n    NoiseGenerator1D: NoiseGenerator1D,\r\n    NoiseGenerator2D: NoiseGenerator2D\r\n};\r\n\r\n// -- 1D Noise Generator -------------------------------------------------------\r\n\r\n/**\r\n * A utility class for generating noise values\r\n * @constructor\r\n * @param {object} p               Reference to a p5 sketch\r\n * @param {number} [min=0]         Minimum value for the noise\r\n * @param {number} [max=1]         Maximum value for the noise\r\n * @param {number} [increment=0.1] Scale of the noise, used when updating\r\n * @param {number} [offset=random] A value used to ensure multiple noise\r\n *                                 generators are returning \"independent\" values\r\n */\r\nfunction NoiseGenerator1D(p, min, max, increment, offset) {\r\n    this.p = p;\r\n    this.min = (min !== undefined) ? min : 0;\r\n    this.max = (max !== undefined) ? max : 1;\r\n    this.increment = (increment !== undefined) ? increment : 0.1;\r\n    this.position = (offset !== undefined) ? p.random(-1000000, 1000000) : 0;\r\n}\r\n\r\n/**\r\n * Update the min and max noise values\r\n * @param  {number} min Minimum noise value\r\n * @param  {number} max Maximum noise value\r\n */\r\nNoiseGenerator1D.prototype.setBounds = function (min, max) {\r\n    if (min !== undefined) this.min = min;\r\n    if (max !== undefined) this.max = max;\r\n};\r\n\r\n/**\r\n * Update the noise increment (e.g. scale)\r\n * @param  {number} increment New increment (scale) value\r\n */\r\nNoiseGenerator1D.prototype.setIncrement = function (increment) {\r\n    if (increment !== undefined) this.increment = increment;\r\n};\r\n\r\n/** \r\n * Generate the next noise value\r\n * @return {number} A noisy value between object's min and max\r\n */\r\nNoiseGenerator1D.prototype.generate = function () {\r\n    this._update();\r\n    var n = this.p.noise(this.position);\r\n    n = this.p.map(n, 0, 1, this.min, this.max);\r\n    return n;\r\n};\r\n\r\n/**\r\n * Internal update method for generating next noise value\r\n * @private\r\n */\r\nNoiseGenerator1D.prototype._update = function () {\r\n    this.position += this.increment;\r\n};\r\n\r\n\r\n// -- 2D Noise Generator -------------------------------------------------------\r\n\r\nfunction NoiseGenerator2D(p, xMin, xMax, yMin, yMax, xIncrement, yIncrement, \r\n                          xOffset, yOffset) {\r\n    this.xNoise = new NoiseGenerator1D(p, xMin, xMax, xIncrement, xOffset);\r\n    this.yNoise = new NoiseGenerator1D(p, yMin, yMax, yIncrement, yOffset);\r\n    this.p = p;\r\n}\r\n\r\n/**\r\n * Update the min and max noise values\r\n * @param  {object} options Object with bounds to be updated e.g. \r\n *                          { xMin: 0, xMax: 1, yMin: -1, yMax: 1 }\r\n */\r\nNoiseGenerator2D.prototype.setBounds = function (options) {\r\n    if (!options) return;\r\n    if (options.xMin !== undefined) this.xMin = options.xMin;\r\n    if (options.xMax !== undefined) this.xMax = options.xMax;\r\n    if (options.yMin !== undefined) this.yMin = options.yMin;\r\n    if (options.yMax !== undefined) this.yMax = options.yMax;\r\n};\r\n\r\n/**\r\n * Update the increment (e.g. scale) for the noise generator\r\n * @param  {object} options Object with bounds to be updated e.g. \r\n *                          { xIncrement: 0.05, yIncrement: 0.1 }\r\n */\r\nNoiseGenerator2D.prototype.setBounds = function (options) {\r\n    if (!options) return;\r\n    if (options.xIncrement !== undefined) this.xNoise.setIncrement(\r\n                                                            options.xIncrement);\r\n    if (options.yIncrement !== undefined) this.yNoise.setIncrement(\r\n                                                            options.yIncrement);\r\n};\r\n\r\n/**\r\n * Generate the next pair of noise values\r\n * @return {object} Object with x and y properties that contain the next noise\r\n *                  values along each dimension\r\n */\r\nNoiseGenerator2D.prototype.generate = function () {\r\n    return {\r\n        x: this.xNoise.generate(),\r\n        y: this.yNoise.generate()\r\n    };\r\n};\n},{}],3:[function(require,module,exports){\nrequire(\"./sketches/noisy-word.js\")();\r\nrequire(\"./sketches/halftone-flashlight-word.js\")();\n},{\"./sketches/halftone-flashlight-word.js\":4,\"./sketches/noisy-word.js\":5}],4:[function(require,module,exports){\nmodule.exports = startSketch;\r\n\r\n// Modules\r\nvar dom = require(\"../utilities/dom-utilities.js\");\r\nvar Noise = require(\"../generators/noise-generators.js\");\r\nvar BboxText = require(\"p5-bbox-aligned-text\");\r\n\r\n// Globals\r\nvar p, font, circles, bboxText;\r\nvar isFirstFrame = true;\r\nvar isMouseOver = false;\r\nvar canvasSize = {\r\n    width: 400,\r\n    height: 150\r\n};\r\nvar text = \"halftone\";\r\nvar fontSize = 150;\r\nvar fontPath = \"./assets/fonts/leaguegothic-regular-webfont.ttf\";\r\n\r\nfunction startSketch() { \r\n    // Create div on page for the sketch\r\n    var id = \"halftone-flashlight-word\";\r\n    var sketchesContainer = document.getElementById(\"sketches\");\r\n    var sketchDiv = dom.createElement(\"div\", {id: id}, sketchesContainer);\r\n\r\n    // Create a p5 instance inside of the ID specified\r\n    new p5(function (_p) {\r\n        p = _p;\r\n        p.preload = preload;\r\n        p.setup = setup;\r\n        p.draw = draw;\r\n    }, id); \r\n}\r\n\r\nfunction preload() {\r\n    // Load the font into a global - this way we can ask the font for a bbox\r\n    font = p.loadFont(fontPath);\r\n}\r\n\r\nfunction setup() {\r\n    var renderer = p.createCanvas(canvasSize.width, canvasSize.height);\r\n\r\n    // There isn't a good way to check whether the sketch has the mouse over\r\n    // it. p.mouseX & p.mouseY are initialized to (0, 0), and p.focused isn't \r\n    // always reliable.\r\n    renderer.canvas.addEventListener(\"mouseover\", function () {\r\n        isMouseOver = true;\r\n    });\r\n    renderer.canvas.addEventListener(\"mouseout\", function () {\r\n        isMouseOver = false;\r\n    });\r\n\r\n    // Draw the stationary text\r\n    p.background(255);\r\n    p.textSize(fontSize);\r\n    bboxText = new BboxText(font, text, fontSize, p);\r\n    bboxText.setAnchor(BboxText.ALIGN.CENTER, BboxText.BASELINE.FONT_CENTER);\r\n    p.noStroke();\r\n    p.fill(\"#0A000A\");    \r\n    bboxText.draw(p.width / 2, p.height / 2);\r\n\r\n\r\n    // Loop over the pixels in the text's bounding box to sample the word\r\n    var bbox = bboxText.getBbox(p.width / 2, p.height / 2);\r\n    var startX = Math.floor(Math.max(bbox.x - 5, 0));\r\n    var endX = Math.ceil(Math.min(bbox.x + bbox.w + 5, p.width));\r\n    var startY = Math.floor(Math.max(bbox.y - 5, 0));\r\n    var endY = Math.ceil(Math.min(bbox.y + bbox.h + 5, p.height));\r\n    var spacing = 5;\r\n    p.loadPixels();\r\n    p.pixelDensity(1);\r\n    circles = [];\r\n    for (var y = startY; y < endY; y += spacing) {\r\n        for (var x = startX; x < endX; x += spacing) {  \r\n            var i = 4 * ((y * p.width) + x);\r\n            var r = p.pixels[i];\r\n            var g = p.pixels[i + 1];\r\n            var b = p.pixels[i + 2];\r\n            var a = p.pixels[i + 3];\r\n            var c = p.color(r, g, b, a);\r\n            if (p.saturation(c) > 0) {\r\n                circles.push({\r\n                    x: x + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    y: y + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    color: p.color(\"#06FFFF\")\r\n                });\r\n                circles.push({\r\n                    x: x + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    y: y + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    color: p.color(\"#FE00FE\")\r\n                });\r\n                circles.push({\r\n                    x: x + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    y: y + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    color: p.color(\"#FFFF04\")\r\n                });\r\n            }\r\n        }\r\n    }\r\n    p.updatePixels();\r\n}\r\n\r\nfunction draw() {\r\n    // No need to do anything if the mouse isn't over the sketch\r\n    if (!isMouseOver) return;\r\n\r\n    // When the text is about to become active for the first time, clear\r\n    // the stationary logo that was drawn during setup. \r\n    if (isFirstFrame) {\r\n        p.background(255);\r\n        isFirstFrame = false;\r\n    }\r\n\r\n    // Clear\r\n    p.blendMode(p.BLEND);\r\n    p.background(255);\r\n\r\n    // Draw \"halftone\" logo\r\n    p.noStroke();   \r\n    p.blendMode(p.MULTIPLY);\r\n    for (var i = 0; i < circles.length; i += 1) {\r\n        var circle = circles[i];\r\n        var c = circle.color;\r\n        var dist = p.dist(circle.x, circle.y, p.mouseX, p.mouseY);\r\n        var radius = p.map(dist, 0, 150, 1, 10);\r\n        p.fill(c);\r\n        p.ellipse(circle.x, circle.y, radius, radius);\r\n    }\r\n}\n},{\"../generators/noise-generators.js\":2,\"../utilities/dom-utilities.js\":6,\"p5-bbox-aligned-text\":1}],5:[function(require,module,exports){\nmodule.exports = startSketch;\r\n\r\n// Modules\r\nvar dom = require(\"../utilities/dom-utilities.js\");\r\nvar Noise = require(\"../generators/noise-generators.js\");\r\n\r\n// Globals\r\nvar p, font, rotationNoise, xyNoise;\r\nvar isFirstFrame = true;\r\nvar isMouseOver = false;\r\nvar canvasSize = {\r\n\twidth: 400,\r\n\theight: 150\r\n};\r\nvar text = \"Squiggle\";\r\nvar fontSize = 100;\r\nvar fontPath = \"./assets/fonts/leaguegothic-regular-webfont.ttf\";\r\n\r\nfunction startSketch() {\t\r\n\t// Create div on page for the sketch\r\n\tvar id = \"noisy-word\";\r\n\tvar sketchesContainer = document.getElementById(\"sketches\");\r\n\tvar sketchDiv = dom.createElement(\"div\", {id: id}, sketchesContainer);\r\n\r\n\t// Create a p5 instance inside of the ID specified\r\n\tnew p5(function (_p) {\r\n\t\tp = _p;\r\n\t\tp.preload = preload;\r\n\t\tp.setup = setup;\r\n\t\tp.draw = draw;\r\n\t}, id);\t\r\n}\r\n\r\nfunction preload() {\r\n\t// Load the font into a global - this way we can ask the font for a bbox\r\n\tfont = p.loadFont(fontPath);\r\n}\r\n\r\nfunction setup() {\r\n\tvar renderer = p.createCanvas(canvasSize.width, canvasSize.height);\r\n\r\n\t// There isn't a good way to check whether the sketch has the mouse over\r\n\t// it. p.mouseX & p.mouseY are initialized to (0, 0), and p.focused isn't \r\n\t// always reliable.\r\n\trenderer.canvas.addEventListener(\"mouseover\", function () {\r\n\t\tisMouseOver = true;\r\n\t});\r\n\trenderer.canvas.addEventListener(\"mouseout\", function () {\r\n\t\tisMouseOver = false;\r\n\t});\r\n\r\n\t// Draw the stationary text\r\n\tp.background(255);\r\n\tp.textFont(font);\r\n\tp.textSize(fontSize);\r\n\tp.textAlign(p.CENTER, p.CENTER);\r\n\tp.stroke(255);\r\n\tp.fill(\"#0A000A\");\r\n\tp.strokeWeight(2);\t\t\r\n\tp.text(text, p.width / 2, p.height / 2);\r\n\r\n\t// Set up noise generators\r\n\trotationNoise = new Noise.NoiseGenerator1D(p, -p.PI/4, p.PI/4, 0.02); \r\n\txyNoise = new Noise.NoiseGenerator2D(p, -100, 100, -50, 50, 0.01, 0.01);\r\n}\r\n\r\nfunction draw() {\r\n\t// No need to do anything if the mouse isn't over the sketch\r\n\tif (!isMouseOver) return;\r\n\r\n\t// When the text is about to become active for the first time, clear\r\n\t// the stationary logo that was drawn during setup. \r\n\tif (isFirstFrame) {\r\n\t\tp.background(255);\r\n\t\tisFirstFrame = false;\r\n\t}\r\n\r\n\t// Calculate position and rotation to create a jittery logo\r\n\tvar rotation = rotationNoise.generate();\r\n\tvar xyOffset = xyNoise.generate();\r\n\r\n\t// Draw the logo\r\n\tp.push();\r\n\t\tp.translate(p.width / 2 + xyOffset.x, p.height / 2 + xyOffset.y);\r\n\t\tp.rotate(rotation);\r\n\t\tp.text(text, 0, 0);\r\n\tp.pop();\r\n}\n},{\"../generators/noise-generators.js\":2,\"../utilities/dom-utilities.js\":6}],6:[function(require,module,exports){\nmodule.exports.forEachInObject = function (object, iterationFunction) {\r\n\tif (!object) return;\r\n\tfor (var key in object) {\r\n\t\tif (!object.hasOwnProperty(key)) continue;\r\n\t\titerationFunction(key, object[key], object);\r\n\t}\r\n};\r\n\r\nmodule.exports.createElement = function (tagName, parameters, parent) {\r\n\tvar el = document.createElement(tagName);\r\n\tif (parameters) {\r\n\t\tif (parameters.textContent) el.textContent = parameters.textContent;\r\n\t\tif (parameters.id) el.id = parameters.id;\r\n\t\tif (parameters.className) el.className = parameters.className;\r\n\t\tif (parameters.style) addStyle(el, parameters.style);\r\n\t\tif (parameters.attributes) addAttributes(el, parameters.attributes);\r\n\t}\t\r\n\tif (parent) parent.appendChild(el);\r\n\treturn el;\r\n};\r\n\r\nmodule.exports.addStyle = function (element, style) {\r\n\tif (!style) return;\r\n\tforEachInObject(style, function (key, val) {\r\n\t\telement.style[key] = val;\r\n\t});\t\r\n};\r\n\r\nmodule.exports.addAttributes = function (element, attributes) {\r\n\tif (!attributes) return;\r\n\tforEachInObject(attributes, function (key, val) {\r\n\t\telement[key] = val;\r\n\t});\t\r\n};\r\n\r\nmodule.exports.removeElement = function (element) {\r\n\telement.parentElement.removeChild(element);\r\n};\n},{}]},{},[3])\n\n","module.exports = {\r\n    NoiseGenerator1D: NoiseGenerator1D,\r\n    NoiseGenerator2D: NoiseGenerator2D\r\n};\r\n\r\n// -- 1D Noise Generator -------------------------------------------------------\r\n\r\n/**\r\n * A utility class for generating noise values\r\n * @constructor\r\n * @param {object} p               Reference to a p5 sketch\r\n * @param {number} [min=0]         Minimum value for the noise\r\n * @param {number} [max=1]         Maximum value for the noise\r\n * @param {number} [increment=0.1] Scale of the noise, used when updating\r\n * @param {number} [offset=random] A value used to ensure multiple noise\r\n *                                 generators are returning \"independent\" values\r\n */\r\nfunction NoiseGenerator1D(p, min, max, increment, offset) {\r\n    this.p = p;\r\n    this.min = (min !== undefined) ? min : 0;\r\n    this.max = (max !== undefined) ? max : 1;\r\n    this.increment = (increment !== undefined) ? increment : 0.1;\r\n    this.position = (offset !== undefined) ? p.random(-1000000, 1000000) : 0;\r\n}\r\n\r\n/**\r\n * Update the min and max noise values\r\n * @param  {number} min Minimum noise value\r\n * @param  {number} max Maximum noise value\r\n */\r\nNoiseGenerator1D.prototype.setBounds = function (min, max) {\r\n    if (min !== undefined) this.min = min;\r\n    if (max !== undefined) this.max = max;\r\n};\r\n\r\n/**\r\n * Update the noise increment (e.g. scale)\r\n * @param  {number} increment New increment (scale) value\r\n */\r\nNoiseGenerator1D.prototype.setIncrement = function (increment) {\r\n    if (increment !== undefined) this.increment = increment;\r\n};\r\n\r\n/** \r\n * Generate the next noise value\r\n * @return {number} A noisy value between object's min and max\r\n */\r\nNoiseGenerator1D.prototype.generate = function () {\r\n    this._update();\r\n    var n = this.p.noise(this.position);\r\n    n = this.p.map(n, 0, 1, this.min, this.max);\r\n    return n;\r\n};\r\n\r\n/**\r\n * Internal update method for generating next noise value\r\n * @private\r\n */\r\nNoiseGenerator1D.prototype._update = function () {\r\n    this.position += this.increment;\r\n};\r\n\r\n\r\n// -- 2D Noise Generator -------------------------------------------------------\r\n\r\nfunction NoiseGenerator2D(p, xMin, xMax, yMin, yMax, xIncrement, yIncrement, \r\n                          xOffset, yOffset) {\r\n    this.xNoise = new NoiseGenerator1D(p, xMin, xMax, xIncrement, xOffset);\r\n    this.yNoise = new NoiseGenerator1D(p, yMin, yMax, yIncrement, yOffset);\r\n    this.p = p;\r\n}\r\n\r\n/**\r\n * Update the min and max noise values\r\n * @param  {object} options Object with bounds to be updated e.g. \r\n *                          { xMin: 0, xMax: 1, yMin: -1, yMax: 1 }\r\n */\r\nNoiseGenerator2D.prototype.setBounds = function (options) {\r\n    if (!options) return;\r\n    if (options.xMin !== undefined) this.xMin = options.xMin;\r\n    if (options.xMax !== undefined) this.xMax = options.xMax;\r\n    if (options.yMin !== undefined) this.yMin = options.yMin;\r\n    if (options.yMax !== undefined) this.yMax = options.yMax;\r\n};\r\n\r\n/**\r\n * Update the increment (e.g. scale) for the noise generator\r\n * @param  {object} options Object with bounds to be updated e.g. \r\n *                          { xIncrement: 0.05, yIncrement: 0.1 }\r\n */\r\nNoiseGenerator2D.prototype.setBounds = function (options) {\r\n    if (!options) return;\r\n    if (options.xIncrement !== undefined) this.xNoise.setIncrement(\r\n                                                            options.xIncrement);\r\n    if (options.yIncrement !== undefined) this.yNoise.setIncrement(\r\n                                                            options.yIncrement);\r\n};\r\n\r\n/**\r\n * Generate the next pair of noise values\r\n * @return {object} Object with x and y properties that contain the next noise\r\n *                  values along each dimension\r\n */\r\nNoiseGenerator2D.prototype.generate = function () {\r\n    return {\r\n        x: this.xNoise.generate(),\r\n        y: this.yNoise.generate()\r\n    };\r\n};","require(\"./sketches/noisy-word.js\")();\r\nrequire(\"./sketches/halftone-flashlight-word.js\")();","module.exports = startSketch;\r\n\r\n// Modules\r\nvar dom = require(\"../utilities/dom-utilities.js\");\r\nvar Noise = require(\"../generators/noise-generators.js\");\r\nvar BboxText = require(\"p5-bbox-aligned-text\");\r\n\r\n// Globals\r\nvar p, font, circles, bboxText;\r\nvar isFirstFrame = true;\r\nvar isMouseOver = false;\r\nvar canvasSize = {\r\n    width: 400,\r\n    height: 150\r\n};\r\nvar text = \"halftone\";\r\nvar fontSize = 150;\r\nvar fontPath = \"./assets/fonts/leaguegothic-regular-webfont.ttf\";\r\n\r\nfunction startSketch() { \r\n    // Create div on page for the sketch\r\n    var id = \"halftone-flashlight-word\";\r\n    var sketchesContainer = document.getElementById(\"sketches\");\r\n    var sketchDiv = dom.createElement(\"div\", {id: id}, sketchesContainer);\r\n\r\n    // Create a p5 instance inside of the ID specified\r\n    new p5(function (_p) {\r\n        p = _p;\r\n        p.preload = preload;\r\n        p.setup = setup;\r\n        p.draw = draw;\r\n    }, id); \r\n}\r\n\r\nfunction preload() {\r\n    // Load the font into a global - this way we can ask the font for a bbox\r\n    font = p.loadFont(fontPath);\r\n}\r\n\r\nfunction setup() {\r\n    var renderer = p.createCanvas(canvasSize.width, canvasSize.height);\r\n\r\n    // There isn't a good way to check whether the sketch has the mouse over\r\n    // it. p.mouseX & p.mouseY are initialized to (0, 0), and p.focused isn't \r\n    // always reliable.\r\n    renderer.canvas.addEventListener(\"mouseover\", function () {\r\n        isMouseOver = true;\r\n    });\r\n    renderer.canvas.addEventListener(\"mouseout\", function () {\r\n        isMouseOver = false;\r\n    });\r\n\r\n    // Draw the stationary text\r\n    p.background(255);\r\n    p.textSize(fontSize);\r\n    bboxText = new BboxText(font, text, fontSize, p);\r\n    bboxText.setAnchor(BboxText.ALIGN.CENTER, BboxText.BASELINE.FONT_CENTER);\r\n    p.noStroke();\r\n    p.fill(\"#0A000A\");    \r\n    bboxText.draw(p.width / 2, p.height / 2);\r\n\r\n\r\n    // Loop over the pixels in the text's bounding box to sample the word\r\n    var bbox = bboxText.getBbox(p.width / 2, p.height / 2);\r\n    var startX = Math.floor(Math.max(bbox.x - 5, 0));\r\n    var endX = Math.ceil(Math.min(bbox.x + bbox.w + 5, p.width));\r\n    var startY = Math.floor(Math.max(bbox.y - 5, 0));\r\n    var endY = Math.ceil(Math.min(bbox.y + bbox.h + 5, p.height));\r\n    var spacing = 5;\r\n    p.loadPixels();\r\n    p.pixelDensity(1);\r\n    circles = [];\r\n    for (var y = startY; y < endY; y += spacing) {\r\n        for (var x = startX; x < endX; x += spacing) {  \r\n            var i = 4 * ((y * p.width) + x);\r\n            var r = p.pixels[i];\r\n            var g = p.pixels[i + 1];\r\n            var b = p.pixels[i + 2];\r\n            var a = p.pixels[i + 3];\r\n            var c = p.color(r, g, b, a);\r\n            if (p.saturation(c) > 0) {\r\n                circles.push({\r\n                    x: x + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    y: y + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    color: p.color(\"#06FFFF\")\r\n                });\r\n                circles.push({\r\n                    x: x + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    y: y + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    color: p.color(\"#FE00FE\")\r\n                });\r\n                circles.push({\r\n                    x: x + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    y: y + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    color: p.color(\"#FFFF04\")\r\n                });\r\n            }\r\n        }\r\n    }\r\n    p.updatePixels();\r\n}\r\n\r\nfunction draw() {\r\n    // No need to do anything if the mouse isn't over the sketch\r\n    if (!isMouseOver) return;\r\n\r\n    // When the text is about to become active for the first time, clear\r\n    // the stationary logo that was drawn during setup. \r\n    if (isFirstFrame) {\r\n        p.background(255);\r\n        isFirstFrame = false;\r\n    }\r\n\r\n    // Clear\r\n    p.blendMode(p.BLEND);\r\n    p.background(255);\r\n\r\n    // Draw \"halftone\" logo\r\n    p.noStroke();   \r\n    p.blendMode(p.MULTIPLY);\r\n    for (var i = 0; i < circles.length; i += 1) {\r\n        var circle = circles[i];\r\n        var c = circle.color;\r\n        var dist = p.dist(circle.x, circle.y, p.mouseX, p.mouseY);\r\n        var radius = p.map(dist, 0, 150, 1, 10);\r\n        p.fill(c);\r\n        p.ellipse(circle.x, circle.y, radius, radius);\r\n    }\r\n}","module.exports = startSketch;\r\n\r\n// Modules\r\nvar dom = require(\"../utilities/dom-utilities.js\");\r\nvar Noise = require(\"../generators/noise-generators.js\");\r\n\r\n// Globals\r\nvar p, font, rotationNoise, xyNoise;\r\nvar isFirstFrame = true;\r\nvar isMouseOver = false;\r\nvar canvasSize = {\r\n\twidth: 400,\r\n\theight: 150\r\n};\r\nvar text = \"Squiggle\";\r\nvar fontSize = 100;\r\nvar fontPath = \"./assets/fonts/leaguegothic-regular-webfont.ttf\";\r\n\r\nfunction startSketch() {\t\r\n\t// Create div on page for the sketch\r\n\tvar id = \"noisy-word\";\r\n\tvar sketchesContainer = document.getElementById(\"sketches\");\r\n\tvar sketchDiv = dom.createElement(\"div\", {id: id}, sketchesContainer);\r\n\r\n\t// Create a p5 instance inside of the ID specified\r\n\tnew p5(function (_p) {\r\n\t\tp = _p;\r\n\t\tp.preload = preload;\r\n\t\tp.setup = setup;\r\n\t\tp.draw = draw;\r\n\t}, id);\t\r\n}\r\n\r\nfunction preload() {\r\n\t// Load the font into a global - this way we can ask the font for a bbox\r\n\tfont = p.loadFont(fontPath);\r\n}\r\n\r\nfunction setup() {\r\n\tvar renderer = p.createCanvas(canvasSize.width, canvasSize.height);\r\n\r\n\t// There isn't a good way to check whether the sketch has the mouse over\r\n\t// it. p.mouseX & p.mouseY are initialized to (0, 0), and p.focused isn't \r\n\t// always reliable.\r\n\trenderer.canvas.addEventListener(\"mouseover\", function () {\r\n\t\tisMouseOver = true;\r\n\t});\r\n\trenderer.canvas.addEventListener(\"mouseout\", function () {\r\n\t\tisMouseOver = false;\r\n\t});\r\n\r\n\t// Draw the stationary text\r\n\tp.background(255);\r\n\tp.textFont(font);\r\n\tp.textSize(fontSize);\r\n\tp.textAlign(p.CENTER, p.CENTER);\r\n\tp.stroke(255);\r\n\tp.fill(\"#0A000A\");\r\n\tp.strokeWeight(2);\t\t\r\n\tp.text(text, p.width / 2, p.height / 2);\r\n\r\n\t// Set up noise generators\r\n\trotationNoise = new Noise.NoiseGenerator1D(p, -p.PI/4, p.PI/4, 0.02); \r\n\txyNoise = new Noise.NoiseGenerator2D(p, -100, 100, -50, 50, 0.01, 0.01);\r\n}\r\n\r\nfunction draw() {\r\n\t// No need to do anything if the mouse isn't over the sketch\r\n\tif (!isMouseOver) return;\r\n\r\n\t// When the text is about to become active for the first time, clear\r\n\t// the stationary logo that was drawn during setup. \r\n\tif (isFirstFrame) {\r\n\t\tp.background(255);\r\n\t\tisFirstFrame = false;\r\n\t}\r\n\r\n\t// Calculate position and rotation to create a jittery logo\r\n\tvar rotation = rotationNoise.generate();\r\n\tvar xyOffset = xyNoise.generate();\r\n\r\n\t// Draw the logo\r\n\tp.push();\r\n\t\tp.translate(p.width / 2 + xyOffset.x, p.height / 2 + xyOffset.y);\r\n\t\tp.rotate(rotation);\r\n\t\tp.text(text, 0, 0);\r\n\tp.pop();\r\n}","module.exports.forEachInObject = function (object, iterationFunction) {\r\n\tif (!object) return;\r\n\tfor (var key in object) {\r\n\t\tif (!object.hasOwnProperty(key)) continue;\r\n\t\titerationFunction(key, object[key], object);\r\n\t}\r\n};\r\n\r\nmodule.exports.createElement = function (tagName, parameters, parent) {\r\n\tvar el = document.createElement(tagName);\r\n\tif (parameters) {\r\n\t\tif (parameters.textContent) el.textContent = parameters.textContent;\r\n\t\tif (parameters.id) el.id = parameters.id;\r\n\t\tif (parameters.className) el.className = parameters.className;\r\n\t\tif (parameters.style) addStyle(el, parameters.style);\r\n\t\tif (parameters.attributes) addAttributes(el, parameters.attributes);\r\n\t}\t\r\n\tif (parent) parent.appendChild(el);\r\n\treturn el;\r\n};\r\n\r\nmodule.exports.addStyle = function (element, style) {\r\n\tif (!style) return;\r\n\tforEachInObject(style, function (key, val) {\r\n\t\telement.style[key] = val;\r\n\t});\t\r\n};\r\n\r\nmodule.exports.addAttributes = function (element, attributes) {\r\n\tif (!attributes) return;\r\n\tforEachInObject(attributes, function (key, val) {\r\n\t\telement[key] = val;\r\n\t});\t\r\n};\r\n\r\nmodule.exports.removeElement = function (element) {\r\n\telement.parentElement.removeChild(element);\r\n};"],"sourceRoot":"/source/"}