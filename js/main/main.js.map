{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/js/generators/noise-generators.js","main.js","src/js/main.js","src/js/sketches/halftone-flashlight-word.js","src/js/sketches/noisy-word.js","src/js/utilities/dom-utilities.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","NoiseGenerator1D","p","min","max","increment","offset","this","undefined","position","random","NoiseGenerator2D","xMin","xMax","yMin","yMax","xIncrement","yIncrement","xOffset","yOffset","xNoise","yNoise","prototype","setBounds","setIncrement","generate","_update","noise","map","options","x","y","2","./sketches/halftone-flashlight-word.js","./sketches/noisy-word.js","3","startSketch","containerID","id","sketchesContainer","document","getElementById","dom","createElement","p5","_p","preload","setup","draw","font","loadFont","fontPath","renderer","createCanvas","canvasSize","width","height","canvas","addEventListener","isMouseOver","background","textFont","textSize","fontSize","textAlign","CENTER","noStroke","fill","text","spacing","loadPixels","pixelDensity","circles","pixels","g","b","c","color","saturation","push","updatePixels","isFirstFrame","blendMode","BLEND","MULTIPLY","circle","dist","mouseX","mouseY","radius","ellipse","../generators/noise-generators.js","../utilities/dom-utilities.js","4","stroke","strokeWeight","rotationNoise","Noise","PI","xyNoise","rotation","xyOffset","translate","rotate","pop","5","forEachInObject","object","iterationFunction","key","hasOwnProperty","tagName","parameters","parent","el","textContent","className","style","addStyle","attributes","addAttributes","appendChild","element","val","removeElement","parentElement","removeChild"],"mappings":"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","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = {\r\n    NoiseGenerator1D: NoiseGenerator1D,\r\n    NoiseGenerator2D: NoiseGenerator2D\r\n};\r\n\r\n// -- 1D Noise Generator -------------------------------------------------------\r\n\r\n/**\r\n * A utility class for generating noise values\r\n * @constructor\r\n * @param {object} p               Reference to a p5 sketch\r\n * @param {number} [min=0]         Minimum value for the noise\r\n * @param {number} [max=1]         Maximum value for the noise\r\n * @param {number} [increment=0.1] Scale of the noise, used when updating\r\n * @param {number} [offset=random] A value used to ensure multiple noise\r\n *                                 generators are returning \"independent\" values\r\n */\r\nfunction NoiseGenerator1D(p, min, max, increment, offset) {\r\n    this.p = p;\r\n    this.min = (min !== undefined) ? min : 0;\r\n    this.max = (max !== undefined) ? max : 1;\r\n    this.increment = (increment !== undefined) ? increment : 0.1;\r\n    this.position = (offset !== undefined) ? p.random(-1000000, 1000000) : 0;\r\n}\r\n\r\n/**\r\n * Update the min and max noise values\r\n * @param  {number} min Minimum noise value\r\n * @param  {number} max Maximum noise value\r\n */\r\nNoiseGenerator1D.prototype.setBounds = function (min, max) {\r\n    if (min !== undefined) this.min = min;\r\n    if (max !== undefined) this.max = max;\r\n};\r\n\r\n/**\r\n * Update the noise increment (e.g. scale)\r\n * @param  {number} increment New increment (scale) value\r\n */\r\nNoiseGenerator1D.prototype.setIncrement = function (increment) {\r\n    if (increment !== undefined) this.increment = increment;\r\n};\r\n\r\n/** \r\n * Generate the next noise value\r\n * @return {number} A noisy value between object's min and max\r\n */\r\nNoiseGenerator1D.prototype.generate = function () {\r\n    this._update();\r\n    var n = this.p.noise(this.position);\r\n    n = this.p.map(n, 0, 1, this.min, this.max);\r\n    return n;\r\n};\r\n\r\n/**\r\n * Internal update method for generating next noise value\r\n * @private\r\n */\r\nNoiseGenerator1D.prototype._update = function () {\r\n    this.position += this.increment;\r\n};\r\n\r\n\r\n// -- 2D Noise Generator -------------------------------------------------------\r\n\r\nfunction NoiseGenerator2D(p, xMin, xMax, yMin, yMax, xIncrement, yIncrement, \r\n                          xOffset, yOffset) {\r\n    this.xNoise = new NoiseGenerator1D(p, xMin, xMax, xIncrement, xOffset);\r\n    this.yNoise = new NoiseGenerator1D(p, yMin, yMax, yIncrement, yOffset);\r\n    this.p = p;\r\n}\r\n\r\n/**\r\n * Update the min and max noise values\r\n * @param  {object} options Object with bounds to be updated e.g. \r\n *                          { xMin: 0, xMax: 1, yMin: -1, yMax: 1 }\r\n */\r\nNoiseGenerator2D.prototype.setBounds = function (options) {\r\n    if (!options) return;\r\n    if (options.xMin !== undefined) this.xMin = options.xMin;\r\n    if (options.xMax !== undefined) this.xMax = options.xMax;\r\n    if (options.yMin !== undefined) this.yMin = options.yMin;\r\n    if (options.yMax !== undefined) this.yMax = options.yMax;\r\n};\r\n\r\n/**\r\n * Update the increment (e.g. scale) for the noise generator\r\n * @param  {object} options Object with bounds to be updated e.g. \r\n *                          { xIncrement: 0.05, yIncrement: 0.1 }\r\n */\r\nNoiseGenerator2D.prototype.setBounds = function (options) {\r\n    if (!options) return;\r\n    if (options.xIncrement !== undefined) this.xNoise.setIncrement(\r\n                                                            options.xIncrement);\r\n    if (options.yIncrement !== undefined) this.yNoise.setIncrement(\r\n                                                            options.yIncrement);\r\n};\r\n\r\n/**\r\n * Generate the next pair of noise values\r\n * @return {object} Object with x and y properties that contain the next noise\r\n *                  values along each dimension\r\n */\r\nNoiseGenerator2D.prototype.generate = function () {\r\n    return {\r\n        x: this.xNoise.generate(),\r\n        y: this.yNoise.generate()\r\n    };\r\n};","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports = {\r\n    NoiseGenerator1D: NoiseGenerator1D,\r\n    NoiseGenerator2D: NoiseGenerator2D\r\n};\r\n\r\n// -- 1D Noise Generator -------------------------------------------------------\r\n\r\n/**\r\n * A utility class for generating noise values\r\n * @constructor\r\n * @param {object} p               Reference to a p5 sketch\r\n * @param {number} [min=0]         Minimum value for the noise\r\n * @param {number} [max=1]         Maximum value for the noise\r\n * @param {number} [increment=0.1] Scale of the noise, used when updating\r\n * @param {number} [offset=random] A value used to ensure multiple noise\r\n *                                 generators are returning \"independent\" values\r\n */\r\nfunction NoiseGenerator1D(p, min, max, increment, offset) {\r\n    this.p = p;\r\n    this.min = (min !== undefined) ? min : 0;\r\n    this.max = (max !== undefined) ? max : 1;\r\n    this.increment = (increment !== undefined) ? increment : 0.1;\r\n    this.position = (offset !== undefined) ? p.random(-1000000, 1000000) : 0;\r\n}\r\n\r\n/**\r\n * Update the min and max noise values\r\n * @param  {number} min Minimum noise value\r\n * @param  {number} max Maximum noise value\r\n */\r\nNoiseGenerator1D.prototype.setBounds = function (min, max) {\r\n    if (min !== undefined) this.min = min;\r\n    if (max !== undefined) this.max = max;\r\n};\r\n\r\n/**\r\n * Update the noise increment (e.g. scale)\r\n * @param  {number} increment New increment (scale) value\r\n */\r\nNoiseGenerator1D.prototype.setIncrement = function (increment) {\r\n    if (increment !== undefined) this.increment = increment;\r\n};\r\n\r\n/** \r\n * Generate the next noise value\r\n * @return {number} A noisy value between object's min and max\r\n */\r\nNoiseGenerator1D.prototype.generate = function () {\r\n    this._update();\r\n    var n = this.p.noise(this.position);\r\n    n = this.p.map(n, 0, 1, this.min, this.max);\r\n    return n;\r\n};\r\n\r\n/**\r\n * Internal update method for generating next noise value\r\n * @private\r\n */\r\nNoiseGenerator1D.prototype._update = function () {\r\n    this.position += this.increment;\r\n};\r\n\r\n\r\n// -- 2D Noise Generator -------------------------------------------------------\r\n\r\nfunction NoiseGenerator2D(p, xMin, xMax, yMin, yMax, xIncrement, yIncrement, \r\n                          xOffset, yOffset) {\r\n    this.xNoise = new NoiseGenerator1D(p, xMin, xMax, xIncrement, xOffset);\r\n    this.yNoise = new NoiseGenerator1D(p, yMin, yMax, yIncrement, yOffset);\r\n    this.p = p;\r\n}\r\n\r\n/**\r\n * Update the min and max noise values\r\n * @param  {object} options Object with bounds to be updated e.g. \r\n *                          { xMin: 0, xMax: 1, yMin: -1, yMax: 1 }\r\n */\r\nNoiseGenerator2D.prototype.setBounds = function (options) {\r\n    if (!options) return;\r\n    if (options.xMin !== undefined) this.xMin = options.xMin;\r\n    if (options.xMax !== undefined) this.xMax = options.xMax;\r\n    if (options.yMin !== undefined) this.yMin = options.yMin;\r\n    if (options.yMax !== undefined) this.yMax = options.yMax;\r\n};\r\n\r\n/**\r\n * Update the increment (e.g. scale) for the noise generator\r\n * @param  {object} options Object with bounds to be updated e.g. \r\n *                          { xIncrement: 0.05, yIncrement: 0.1 }\r\n */\r\nNoiseGenerator2D.prototype.setBounds = function (options) {\r\n    if (!options) return;\r\n    if (options.xIncrement !== undefined) this.xNoise.setIncrement(\r\n                                                            options.xIncrement);\r\n    if (options.yIncrement !== undefined) this.yNoise.setIncrement(\r\n                                                            options.yIncrement);\r\n};\r\n\r\n/**\r\n * Generate the next pair of noise values\r\n * @return {object} Object with x and y properties that contain the next noise\r\n *                  values along each dimension\r\n */\r\nNoiseGenerator2D.prototype.generate = function () {\r\n    return {\r\n        x: this.xNoise.generate(),\r\n        y: this.yNoise.generate()\r\n    };\r\n};\n},{}],2:[function(require,module,exports){\nrequire(\"./sketches/noisy-word.js\")();\r\nrequire(\"./sketches/halftone-flashlight-word.js\")();\n},{\"./sketches/halftone-flashlight-word.js\":3,\"./sketches/noisy-word.js\":4}],3:[function(require,module,exports){\nmodule.exports = startSketch;\r\n\r\n// Modules\r\nvar dom = require(\"../utilities/dom-utilities.js\");\r\nvar Noise = require(\"../generators/noise-generators.js\");\r\n\r\n// Globals\r\nvar p, font, circles;\r\nvar isFirstFrame = true;\r\nvar isMouseOver = false;\r\nvar canvasSize = {\r\n    width: 400,\r\n    height: 150\r\n};\r\nvar text = \"String\";\r\nvar fontSize = 130;\r\nvar fontPath = \"/assets/fonts/leaguegothic-regular-webfont.ttf\";\r\n\r\nfunction startSketch(containerID) { \r\n    // Create div on page for the sketch\r\n    var id = \"halftone-flashlight-word\";\r\n    var sketchesContainer = document.getElementById(\"sketches\");\r\n    var sketchDiv = dom.createElement(\"div\", {id: id}, sketchesContainer);\r\n\r\n    // Create a p5 instance inside of the ID specified\r\n    new p5(function (_p) {\r\n        p = _p;\r\n        p.preload = preload;\r\n        p.setup = setup;\r\n        p.draw = draw;\r\n    }, id); \r\n}\r\n\r\nfunction preload() {\r\n    // Load the font into a global - this way we can ask the font for a bbox\r\n    font = p.loadFont(fontPath);\r\n}\r\n\r\nfunction setup() {\r\n    var renderer = p.createCanvas(canvasSize.width, canvasSize.height);\r\n\r\n    // There isn't a good way to check whether the sketch has the mouse over\r\n    // it. p.mouseX & p.mouseY are initialized to (0, 0), and p.focused isn't \r\n    // always reliable.\r\n    renderer.canvas.addEventListener(\"mouseover\", function () {\r\n        isMouseOver = true;\r\n    });\r\n    renderer.canvas.addEventListener(\"mouseout\", function () {\r\n        isMouseOver = false;\r\n    });\r\n\r\n    // Draw the stationary text\r\n    p.background(255);\r\n    p.textFont(font);\r\n    p.textSize(fontSize);\r\n    p.textAlign(p.CENTER, p.CENTER);\r\n    p.noStroke();\r\n    p.fill(\"#0A000A\");    \r\n    p.text(text, p.width / 2, p.height / 2);\r\n\r\n    // Loop over the pixels in the canvas to sample the word\r\n    var spacing = 5;\r\n    p.loadPixels();\r\n    p.pixelDensity(1);\r\n    circles = [];\r\n    for (var y = 0; y < p.height; y += spacing) {\r\n        for (var x = 0; x < p.width; x += spacing) {            \r\n            var i = 4 * ((y * p.width) + x);\r\n            var r = p.pixels[i];\r\n            var g = p.pixels[i + 1];\r\n            var b = p.pixels[i + 2];\r\n            var a = p.pixels[i + 3];\r\n            var c = p.color(r, g, b, a);\r\n            if (p.saturation(c) > 0) {\r\n                circles.push({\r\n                    x: x + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    y: y + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    color: p.color(\"#06FFFF\")\r\n                });\r\n                circles.push({\r\n                    x: x + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    y: y + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    color: p.color(\"#FE00FE\")\r\n                });\r\n                circles.push({\r\n                    x: x + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    y: y + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    color: p.color(\"#FFFF04\")\r\n                });\r\n            }\r\n        }\r\n    }\r\n    p.updatePixels();\r\n}\r\n\r\nfunction draw() {\r\n    // No need to do anything if the mouse isn't over the sketch\r\n    if (!isMouseOver) return;\r\n\r\n    // When the text is about to become active for the first time, clear\r\n    // the stationary logo that was drawn during setup. \r\n    if (isFirstFrame) {\r\n        p.background(255);\r\n        isFirstFrame = false;\r\n    }\r\n\r\n    // Clear\r\n    p.blendMode(p.BLEND);\r\n    p.background(255);\r\n\r\n    // Draw \"halftone\" logo\r\n    p.noStroke();   \r\n    p.blendMode(p.MULTIPLY);\r\n    for (var i = 0; i < circles.length; i += 1) {\r\n        var circle = circles[i];\r\n        var c = circle.color;\r\n        var dist = p.dist(circle.x, circle.y, p.mouseX, p.mouseY);\r\n        var radius = p.map(dist, 0, 120, 1, 10);\r\n        p.fill(c);\r\n        p.ellipse(circle.x, circle.y, radius, radius);\r\n    }\r\n}\n},{\"../generators/noise-generators.js\":1,\"../utilities/dom-utilities.js\":5}],4:[function(require,module,exports){\nmodule.exports = startSketch;\r\n\r\n// Modules\r\nvar dom = require(\"../utilities/dom-utilities.js\");\r\nvar Noise = require(\"../generators/noise-generators.js\");\r\n\r\n// Globals\r\nvar p, font, rotationNoise, xyNoise;\r\nvar isFirstFrame = true;\r\nvar isMouseOver = false;\r\nvar canvasSize = {\r\n\twidth: 400,\r\n\theight: 150\r\n};\r\nvar text = \"String\";\r\nvar fontSize = 120;\r\nvar fontPath = \"/assets/fonts/leaguegothic-regular-webfont.ttf\";\r\n\r\nfunction startSketch(containerID) {\t\r\n\t// Create div on page for the sketch\r\n\tvar id = \"noisy-word\";\r\n\tvar sketchesContainer = document.getElementById(\"sketches\");\r\n\tvar sketchDiv = dom.createElement(\"div\", {id: id}, sketchesContainer);\r\n\r\n\t// Create a p5 instance inside of the ID specified\r\n\tnew p5(function (_p) {\r\n\t\tp = _p;\r\n\t\tp.preload = preload;\r\n\t\tp.setup = setup;\r\n\t\tp.draw = draw;\r\n\t}, id);\t\r\n}\r\n\r\nfunction preload() {\r\n\t// Load the font into a global - this way we can ask the font for a bbox\r\n\tfont = p.loadFont(fontPath);\r\n}\r\n\r\nfunction setup() {\r\n\tvar renderer = p.createCanvas(canvasSize.width, canvasSize.height);\r\n\r\n\t// There isn't a good way to check whether the sketch has the mouse over\r\n\t// it. p.mouseX & p.mouseY are initialized to (0, 0), and p.focused isn't \r\n\t// always reliable.\r\n\trenderer.canvas.addEventListener(\"mouseover\", function () {\r\n\t\tisMouseOver = true;\r\n\t});\r\n\trenderer.canvas.addEventListener(\"mouseout\", function () {\r\n\t\tisMouseOver = false;\r\n\t});\r\n\r\n\t// Draw the stationary text\r\n\tp.background(255);\r\n\tp.textFont(font);\r\n\tp.textSize(fontSize);\r\n\tp.textAlign(p.CENTER, p.CENTER);\r\n\tp.stroke(255);\r\n\tp.fill(\"#0A000A\");\r\n\tp.strokeWeight(2);\t\t\r\n\tp.text(text, p.width / 2, p.height / 2);\r\n\r\n\t// Set up noise generators\r\n\trotationNoise = new Noise.NoiseGenerator1D(p, -p.PI/4, p.PI/4, 0.02); \r\n\txyNoise = new Noise.NoiseGenerator2D(p, -100, 100, -50, 50, 0.01, 0.01);\r\n}\r\n\r\nfunction draw() {\r\n\t// No need to do anything if the mouse isn't over the sketch\r\n\tif (!isMouseOver) return;\r\n\r\n\t// When the text is about to become active for the first time, clear\r\n\t// the stationary logo that was drawn during setup. \r\n\tif (isFirstFrame) {\r\n\t\tp.background(255);\r\n\t\tisFirstFrame = false;\r\n\t}\r\n\r\n\t// Calculate position and rotation to create a jittery logo\r\n\tvar rotation = rotationNoise.generate();\r\n\tvar xyOffset = xyNoise.generate();\r\n\r\n\t// Draw the logo\r\n\tp.push();\r\n\t\tp.translate(p.width / 2 + xyOffset.x, p.height / 2 + xyOffset.y);\r\n\t\tp.rotate(rotation);\r\n\t\tp.text(text, 0, 0);\r\n\tp.pop();\r\n}\n},{\"../generators/noise-generators.js\":1,\"../utilities/dom-utilities.js\":5}],5:[function(require,module,exports){\nmodule.exports.forEachInObject = function (object, iterationFunction) {\r\n\tif (!object) return;\r\n\tfor (var key in object) {\r\n\t\tif (!object.hasOwnProperty(key)) continue;\r\n\t\titerationFunction(key, object[key], object);\r\n\t}\r\n};\r\n\r\nmodule.exports.createElement = function (tagName, parameters, parent) {\r\n\tvar el = document.createElement(tagName);\r\n\tif (parameters) {\r\n\t\tif (parameters.textContent) el.textContent = parameters.textContent;\r\n\t\tif (parameters.id) el.id = parameters.id;\r\n\t\tif (parameters.className) el.className = parameters.className;\r\n\t\tif (parameters.style) addStyle(el, parameters.style);\r\n\t\tif (parameters.attributes) addAttributes(el, parameters.attributes);\r\n\t}\t\r\n\tif (parent) parent.appendChild(el);\r\n\treturn el;\r\n};\r\n\r\nmodule.exports.addStyle = function (element, style) {\r\n\tif (!style) return;\r\n\tforEachInObject(style, function (key, val) {\r\n\t\telement.style[key] = val;\r\n\t});\t\r\n};\r\n\r\nmodule.exports.addAttributes = function (element, attributes) {\r\n\tif (!attributes) return;\r\n\tforEachInObject(attributes, function (key, val) {\r\n\t\telement[key] = val;\r\n\t});\t\r\n};\r\n\r\nmodule.exports.removeElement = function (element) {\r\n\telement.parentElement.removeChild(element);\r\n};\n},{}]},{},[2])\n\n","require(\"./sketches/noisy-word.js\")();\r\nrequire(\"./sketches/halftone-flashlight-word.js\")();","module.exports = startSketch;\r\n\r\n// Modules\r\nvar dom = require(\"../utilities/dom-utilities.js\");\r\nvar Noise = require(\"../generators/noise-generators.js\");\r\n\r\n// Globals\r\nvar p, font, circles;\r\nvar isFirstFrame = true;\r\nvar isMouseOver = false;\r\nvar canvasSize = {\r\n    width: 400,\r\n    height: 150\r\n};\r\nvar text = \"String\";\r\nvar fontSize = 130;\r\nvar fontPath = \"/assets/fonts/leaguegothic-regular-webfont.ttf\";\r\n\r\nfunction startSketch(containerID) { \r\n    // Create div on page for the sketch\r\n    var id = \"halftone-flashlight-word\";\r\n    var sketchesContainer = document.getElementById(\"sketches\");\r\n    var sketchDiv = dom.createElement(\"div\", {id: id}, sketchesContainer);\r\n\r\n    // Create a p5 instance inside of the ID specified\r\n    new p5(function (_p) {\r\n        p = _p;\r\n        p.preload = preload;\r\n        p.setup = setup;\r\n        p.draw = draw;\r\n    }, id); \r\n}\r\n\r\nfunction preload() {\r\n    // Load the font into a global - this way we can ask the font for a bbox\r\n    font = p.loadFont(fontPath);\r\n}\r\n\r\nfunction setup() {\r\n    var renderer = p.createCanvas(canvasSize.width, canvasSize.height);\r\n\r\n    // There isn't a good way to check whether the sketch has the mouse over\r\n    // it. p.mouseX & p.mouseY are initialized to (0, 0), and p.focused isn't \r\n    // always reliable.\r\n    renderer.canvas.addEventListener(\"mouseover\", function () {\r\n        isMouseOver = true;\r\n    });\r\n    renderer.canvas.addEventListener(\"mouseout\", function () {\r\n        isMouseOver = false;\r\n    });\r\n\r\n    // Draw the stationary text\r\n    p.background(255);\r\n    p.textFont(font);\r\n    p.textSize(fontSize);\r\n    p.textAlign(p.CENTER, p.CENTER);\r\n    p.noStroke();\r\n    p.fill(\"#0A000A\");    \r\n    p.text(text, p.width / 2, p.height / 2);\r\n\r\n    // Loop over the pixels in the canvas to sample the word\r\n    var spacing = 5;\r\n    p.loadPixels();\r\n    p.pixelDensity(1);\r\n    circles = [];\r\n    for (var y = 0; y < p.height; y += spacing) {\r\n        for (var x = 0; x < p.width; x += spacing) {            \r\n            var i = 4 * ((y * p.width) + x);\r\n            var r = p.pixels[i];\r\n            var g = p.pixels[i + 1];\r\n            var b = p.pixels[i + 2];\r\n            var a = p.pixels[i + 3];\r\n            var c = p.color(r, g, b, a);\r\n            if (p.saturation(c) > 0) {\r\n                circles.push({\r\n                    x: x + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    y: y + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    color: p.color(\"#06FFFF\")\r\n                });\r\n                circles.push({\r\n                    x: x + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    y: y + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    color: p.color(\"#FE00FE\")\r\n                });\r\n                circles.push({\r\n                    x: x + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    y: y + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    color: p.color(\"#FFFF04\")\r\n                });\r\n            }\r\n        }\r\n    }\r\n    p.updatePixels();\r\n}\r\n\r\nfunction draw() {\r\n    // No need to do anything if the mouse isn't over the sketch\r\n    if (!isMouseOver) return;\r\n\r\n    // When the text is about to become active for the first time, clear\r\n    // the stationary logo that was drawn during setup. \r\n    if (isFirstFrame) {\r\n        p.background(255);\r\n        isFirstFrame = false;\r\n    }\r\n\r\n    // Clear\r\n    p.blendMode(p.BLEND);\r\n    p.background(255);\r\n\r\n    // Draw \"halftone\" logo\r\n    p.noStroke();   \r\n    p.blendMode(p.MULTIPLY);\r\n    for (var i = 0; i < circles.length; i += 1) {\r\n        var circle = circles[i];\r\n        var c = circle.color;\r\n        var dist = p.dist(circle.x, circle.y, p.mouseX, p.mouseY);\r\n        var radius = p.map(dist, 0, 120, 1, 10);\r\n        p.fill(c);\r\n        p.ellipse(circle.x, circle.y, radius, radius);\r\n    }\r\n}","module.exports = startSketch;\r\n\r\n// Modules\r\nvar dom = require(\"../utilities/dom-utilities.js\");\r\nvar Noise = require(\"../generators/noise-generators.js\");\r\n\r\n// Globals\r\nvar p, font, rotationNoise, xyNoise;\r\nvar isFirstFrame = true;\r\nvar isMouseOver = false;\r\nvar canvasSize = {\r\n\twidth: 400,\r\n\theight: 150\r\n};\r\nvar text = \"String\";\r\nvar fontSize = 120;\r\nvar fontPath = \"/assets/fonts/leaguegothic-regular-webfont.ttf\";\r\n\r\nfunction startSketch(containerID) {\t\r\n\t// Create div on page for the sketch\r\n\tvar id = \"noisy-word\";\r\n\tvar sketchesContainer = document.getElementById(\"sketches\");\r\n\tvar sketchDiv = dom.createElement(\"div\", {id: id}, sketchesContainer);\r\n\r\n\t// Create a p5 instance inside of the ID specified\r\n\tnew p5(function (_p) {\r\n\t\tp = _p;\r\n\t\tp.preload = preload;\r\n\t\tp.setup = setup;\r\n\t\tp.draw = draw;\r\n\t}, id);\t\r\n}\r\n\r\nfunction preload() {\r\n\t// Load the font into a global - this way we can ask the font for a bbox\r\n\tfont = p.loadFont(fontPath);\r\n}\r\n\r\nfunction setup() {\r\n\tvar renderer = p.createCanvas(canvasSize.width, canvasSize.height);\r\n\r\n\t// There isn't a good way to check whether the sketch has the mouse over\r\n\t// it. p.mouseX & p.mouseY are initialized to (0, 0), and p.focused isn't \r\n\t// always reliable.\r\n\trenderer.canvas.addEventListener(\"mouseover\", function () {\r\n\t\tisMouseOver = true;\r\n\t});\r\n\trenderer.canvas.addEventListener(\"mouseout\", function () {\r\n\t\tisMouseOver = false;\r\n\t});\r\n\r\n\t// Draw the stationary text\r\n\tp.background(255);\r\n\tp.textFont(font);\r\n\tp.textSize(fontSize);\r\n\tp.textAlign(p.CENTER, p.CENTER);\r\n\tp.stroke(255);\r\n\tp.fill(\"#0A000A\");\r\n\tp.strokeWeight(2);\t\t\r\n\tp.text(text, p.width / 2, p.height / 2);\r\n\r\n\t// Set up noise generators\r\n\trotationNoise = new Noise.NoiseGenerator1D(p, -p.PI/4, p.PI/4, 0.02); \r\n\txyNoise = new Noise.NoiseGenerator2D(p, -100, 100, -50, 50, 0.01, 0.01);\r\n}\r\n\r\nfunction draw() {\r\n\t// No need to do anything if the mouse isn't over the sketch\r\n\tif (!isMouseOver) return;\r\n\r\n\t// When the text is about to become active for the first time, clear\r\n\t// the stationary logo that was drawn during setup. \r\n\tif (isFirstFrame) {\r\n\t\tp.background(255);\r\n\t\tisFirstFrame = false;\r\n\t}\r\n\r\n\t// Calculate position and rotation to create a jittery logo\r\n\tvar rotation = rotationNoise.generate();\r\n\tvar xyOffset = xyNoise.generate();\r\n\r\n\t// Draw the logo\r\n\tp.push();\r\n\t\tp.translate(p.width / 2 + xyOffset.x, p.height / 2 + xyOffset.y);\r\n\t\tp.rotate(rotation);\r\n\t\tp.text(text, 0, 0);\r\n\tp.pop();\r\n}","module.exports.forEachInObject = function (object, iterationFunction) {\r\n\tif (!object) return;\r\n\tfor (var key in object) {\r\n\t\tif (!object.hasOwnProperty(key)) continue;\r\n\t\titerationFunction(key, object[key], object);\r\n\t}\r\n};\r\n\r\nmodule.exports.createElement = function (tagName, parameters, parent) {\r\n\tvar el = document.createElement(tagName);\r\n\tif (parameters) {\r\n\t\tif (parameters.textContent) el.textContent = parameters.textContent;\r\n\t\tif (parameters.id) el.id = parameters.id;\r\n\t\tif (parameters.className) el.className = parameters.className;\r\n\t\tif (parameters.style) addStyle(el, parameters.style);\r\n\t\tif (parameters.attributes) addAttributes(el, parameters.attributes);\r\n\t}\t\r\n\tif (parent) parent.appendChild(el);\r\n\treturn el;\r\n};\r\n\r\nmodule.exports.addStyle = function (element, style) {\r\n\tif (!style) return;\r\n\tforEachInObject(style, function (key, val) {\r\n\t\telement.style[key] = val;\r\n\t});\t\r\n};\r\n\r\nmodule.exports.addAttributes = function (element, attributes) {\r\n\tif (!attributes) return;\r\n\tforEachInObject(attributes, function (key, val) {\r\n\t\telement[key] = val;\r\n\t});\t\r\n};\r\n\r\nmodule.exports.removeElement = function (element) {\r\n\telement.parentElement.removeChild(element);\r\n};"],"sourceRoot":"/source/"}