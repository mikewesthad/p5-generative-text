{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/p5-bbox-aligned-text/lib/bbox-aligned-text.js","src/js/generators/noise-generators.js","src/js/generators/sin-generator.js","src/js/main.js","src/js/particles/text-particle.js","src/js/sketches/halftone-flashlight-word.js","src/js/sketches/noisy-word.js","src/js/sketches/word-particle-wrapping.js","src/js/utilities/dom-utilities.js"],"names":[],"mappingsrvpjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvfile":"main.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = BboxAlignedText;\r\n\r\n/**\r\n * Creates a new BboxAlignedText object - a text object that can be drawn with\r\n * anchor points based on a tight bounding box around the text.\r\n * @constructor\r\n * @param {object} font               p5.Font object\r\n * @param {string} text               String to display\r\n * @param {number} [fontSize=12]      Font size to use for string\r\n * @param {object} [pInstance=window] Reference to p5 instance, leave blank if\r\n *                                    sketch is global\r\n * @example\r\n * var font, bboxText;\r\n * function preload() {\r\n *     font = loadFont(\"./assets/Regular.ttf\");\r\n * }\r\n * function setup() {\r\n *     createCanvas(400, 600);\r\n *     background(0);\r\n *     \r\n *     bboxText = new BboxAlignedText(font, \"Hey!\", 30);    \r\n *     bboxText.setRotation(PI / 4);\r\n *     bboxText.setAnchor(BboxAlignedText.ALIGN.BOX_CENTER, \r\n *                        BboxAlignedText.BASELINE.BOX_CENTER);\r\n *     \r\n *     fill(\"#00A8EA\");\r\n *     noStroke();\r\n *     bboxText.draw(width / 2, height / 2, true);\r\n * }\r\n */\r\nfunction BboxAlignedText(font, text, fontSize, pInstance) {\r\n    this._font = font;\r\n    this._text = text;\r\n    this._fontSize = (fontSize !== undefined) ? fontSize : 12;\r\n    this.p = pInstance || window; // If instance is omitted, assume global scope\r\n    this._rotation = 0;\r\n    this._hAlign = BboxAlignedText.ALIGN.BOX_CENTER;\r\n    this._vAlign = BboxAlignedText.BASELINE.BOX_CENTER;\r\n    this._calculateMetrics(true);\r\n}\r\n\r\n/**\r\n * Vertical alignment values\r\n * @public\r\n * @static\r\n * @readonly\r\n * @enum {string}\r\n */\r\nBboxAlignedText.ALIGN = {\r\n    /** Draw from the left of the bbox */\r\n    BOX_LEFT: \"box_left\",\r\n    /** Draw from the center of the bbox */\r\n    BOX_CENTER: \"box_center\",\r\n    /** Draw from the right of the bbox */\r\n    BOX_RIGHT: \"box_right\"\r\n};\r\n\r\n/**\r\n * Baseline alignment values\r\n * @public\r\n * @static\r\n * @readonly\r\n * @enum {string}\r\n */\r\nBboxAlignedText.BASELINE = {\r\n    /** Draw from the top of the bbox */\r\n    BOX_TOP: \"box_top\",\r\n    /** Draw from the center of the bbox */\r\n    BOX_CENTER: \"box_center\",\r\n    /** Draw from the bottom of the bbox */\r\n    BOX_BOTTOM: \"box_bottom\",\r\n    /** \r\n     * Draw from half the height of the font. Specifically the height is\r\n     * calculated as: ascent + descent.\r\n     */\r\n    FONT_CENTER: \"font_center\",\r\n    /** Draw from the the normal font baseline */\r\n    ALPHABETIC: \"alphabetic\"\r\n};\r\n\r\n/**\r\n * Set current text\r\n * @public\r\n * @param {string} string Text string to display\r\n */\r\nBboxAlignedText.prototype.setText = function(string) {\r\n    this._text = string;\r\n    this._calculateMetrics(false);\r\n};\r\n\r\n/**\r\n * Set current text size\r\n * @public\r\n * @param {number} fontSize Text size\r\n */\r\nBboxAlignedText.prototype.setTextSize = function(fontSize) {\r\n    this._fontSize = fontSize;\r\n    this._calculateMetrics(true);\r\n};\r\n\r\n/**\r\n * Set rotation of text\r\n * @public\r\n * @param {number} angle Rotation in radians\r\n */\r\nBboxAlignedText.prototype.setRotation = function(angle) {\r\n    this._rotation = angle;\r\n};\r\n\r\n/**\r\n * Set anchor point for text (horizonal and vertical alignment) relative to\r\n * bounding box\r\n * @public\r\n * @param {string} [hAlign=CENTER] Horizonal alignment\r\n * @param {string} [vAlign=CENTER] Vertical baseline\r\n */\r\nBboxAlignedText.prototype.setAnchor = function(hAlign, vAlign) {\r\n    this._hAlign = hAlign || BboxAlignedText.ALIGN.CENTER;\r\n    this._vAlign = vAlign || BboxAlignedText.BASELINE.CENTER;\r\n};\r\n\r\n/**\r\n * Get the bounding box when the text is placed at the specified coordinates.\r\n * Note: this is the unrotated bounding box!\r\n * @param  {number} x X coordinate\r\n * @param  {number} y Y coordinate\r\n * @return {object}   Returns an object with properties: x, y, w, h\r\n */\r\nBboxAlignedText.prototype.getBbox = function(x, y) {\r\n    var pos = this._calculateAlignedCoords(x, y);\r\n    return {\r\n        x: pos.x + this._boundsOffset.x,\r\n        y: pos.y + this._boundsOffset.y,\r\n        w: this.width,\r\n        h: this.height\r\n    };\r\n};\r\n\r\n/**\r\n * Draws the text particle with the specified style parameters. Note: this is\r\n * going to set the textFont, textSize & rotation before drawing. You should set\r\n * the color/stroke/fill that you want before drawing. This function will clean\r\n * up after itself and reset styling back to what it was before it was called.\r\n * @public\r\n * @param  {number}  [x=0]              X coordinate of text anchor\r\n * @param  {number}  [y=0]              Y coordinate of text anchor\r\n * @param  {boolean} [drawBounds=false] Flag for drawing bounding box\r\n */\r\nBboxAlignedText.prototype.draw = function(x, y, drawBounds) {\r\n    drawBounds = drawBounds || false;\r\n    var pos = {\r\n        x: (x !== undefined) ? x : 0, \r\n        y: (y !== undefined) ? y : 0\r\n    };\r\n\r\n    this.p.push();\r\n\r\n        if (this._rotation) {\r\n            pos = this._calculateRotatedCoords(pos.x, pos.y, this._rotation);\r\n            this.p.rotate(this._rotation);\r\n        }\r\n\r\n        pos = this._calculateAlignedCoords(pos.x, pos.y);\r\n\r\n        this.p.textAlign(this.p.LEFT, this.p.BASELINE);\r\n        this.p.textFont(this._font);\r\n        this.p.textSize(this._fontSize);\r\n        this.p.text(this._text, pos.x, pos.y);\r\n\r\n        if (drawBounds) {\r\n            this.p.stroke(200);\r\n            var boundsX = pos.x + this._boundsOffset.x;\r\n            var boundsY = pos.y + this._boundsOffset.y;\r\n            this.p.noFill();\r\n            this.p.rect(boundsX, boundsY, this.width, this.height);            \r\n        }\r\n\r\n    this.p.pop();\r\n};\r\n\r\n/**\r\n * Project the coordinates (x, y) into a rotated coordinate system\r\n * @private\r\n * @param  {number} x     X coordinate (in unrotated space)\r\n * @param  {number} y     Y coordinate (in unrotated space)\r\n * @param  {number} angle Radians of rotation to apply\r\n * @return {object}       Object with x & y properties\r\n */\r\nBboxAlignedText.prototype._calculateRotatedCoords = function (x, y, angle) {  \r\n    var rx = Math.cos(angle) * x + Math.cos(Math.PI / 2 - angle) * y;\r\n    var ry = -Math.sin(angle) * x + Math.sin(Math.PI / 2 - angle) * y;\r\n    return {x: rx, y: ry};\r\n};\r\n\r\n/**\r\n * Calculates draw coordinates for the text, aligning based on the bounding box.\r\n * The text is eventually drawn with canvas alignment set to left & baseline, so\r\n * this function takes a desired pos & alignment and returns the appropriate\r\n * coordinates for the left & baseline.\r\n * @private\r\n * @param  {number} x      X coordinate\r\n * @param  {number} y      Y coordinate\r\n * @return {object}        Object with x & y properties\r\n */\r\nBboxAlignedText.prototype._calculateAlignedCoords = function(x, y) {\r\n    var newX, newY;\r\n    switch (this._hAlign) {\r\n        case BboxAlignedText.ALIGN.BOX_LEFT:\r\n            newX = x;\r\n            break;\r\n        case BboxAlignedText.ALIGN.BOX_CENTER:\r\n            newX = x - this.halfWidth;\r\n            break;\r\n        case BboxAlignedText.ALIGN.BOX_RIGHT:\r\n            newX = x - this.width;\r\n            break;\r\n        default:\r\n            newX = x;\r\n            console.log(\"Unrecognized horizonal align:\", this._hAlign);\r\n            break;\r\n    }\r\n    switch (this._vAlign) {\r\n        case BboxAlignedText.BASELINE.BOX_TOP:\r\n            newY = y - this._boundsOffset.y;\r\n            break;\r\n        case BboxAlignedText.BASELINE.BOX_CENTER:\r\n            newY = y + this._distBaseToMid;\r\n            break;\r\n        case BboxAlignedText.BASELINE.BOX_BOTTOM:\r\n            newY = y - this._distBaseToBottom;\r\n            break;\r\n        case BboxAlignedText.BASELINE.FONT_CENTER:\r\n            // Height is approximated as ascent + descent\r\n            newY = y - this._descent + (this._ascent + this._descent) / 2;\r\n            break;\r\n        case BboxAlignedText.BASELINE.ALPHABETIC:\r\n            newY = y;\r\n            break;\r\n        default:\r\n            newY = y;\r\n            console.log(\"Unrecognized vertical align:\", this._vAlign);\r\n            break;\r\n    }\r\n    return {x: newX, y: newY};\r\n};\r\n\r\n\r\n/**\r\n * Calculates bounding box and various metrics for the current text and font\r\n * @private\r\n */\r\nBboxAlignedText.prototype._calculateMetrics = function(shouldUpdateHeight) {  \r\n    // p5 0.5.0 has a bug - text bounds are clipped by (0, 0)\r\n    // Calculating bounds hack\r\n    var bounds = this._font.textBounds(this._text, 1000, 1000, this._fontSize);\r\n    // Bounds is a reference - if we mess with it directly, we can mess up \r\n    // future values! (It changes the bbox cache in p5.)\r\n    bounds = { \r\n        x: bounds.x - 1000, \r\n        y: bounds.y - 1000, \r\n        w: bounds.w, \r\n        h: bounds.h \r\n    }; \r\n\r\n    if (shouldUpdateHeight) {\r\n        this._ascent = this._font._textAscent(this._fontSize);\r\n        this._descent = this._font._textDescent(this._fontSize);\r\n    }\r\n\r\n    // Use bounds to calculate font metrics\r\n    this.width = bounds.w;\r\n    this.height = bounds.h;\r\n    this.halfWidth = this.width / 2;\r\n    this.halfHeight = this.height / 2;\r\n    this._boundsOffset = { x: bounds.x, y: bounds.y };\r\n    this._distBaseToMid = Math.abs(bounds.y) - this.halfHeight;\r\n    this._distBaseToBottom = this.height - Math.abs(bounds.y);\r\n};","module.exports = {\r\n    NoiseGenerator1D: NoiseGenerator1D,\r\n    NoiseGenerator2D: NoiseGenerator2D\r\n};\r\n\r\n// -- 1D Noise Generator -------------------------------------------------------\r\n\r\n/**\r\n * A utility class for generating noise values\r\n * @constructor\r\n * @param {object} p               Reference to a p5 sketch\r\n * @param {number} [min=0]         Minimum value for the noise\r\n * @param {number} [max=1]         Maximum value for the noise\r\n * @param {number} [increment=0.1] Scale of the noise, used when updating\r\n * @param {number} [offset=random] A value used to ensure multiple noise\r\n *                                 generators are returning \"independent\" values\r\n */\r\nfunction NoiseGenerator1D(p, min, max, increment, offset) {\r\n    this.p = p;\r\n    this.min = (min !== undefined) ? min : 0;\r\n    this.max = (max !== undefined) ? max : 1;\r\n    this.increment = (increment !== undefined) ? increment : 0.1;\r\n    this.position = (offset !== undefined) ? offset : \r\n                                            p.random(-1000000, 1000000);\r\n}\r\n\r\n/**\r\n * Update the min and max noise values\r\n * @param  {number} min Minimum noise value\r\n * @param  {number} max Maximum noise value\r\n */\r\nNoiseGenerator1D.prototype.setBounds = function (min, max) {\r\n    if (min !== undefined) this.min = min;\r\n    if (max !== undefined) this.max = max;\r\n};\r\n\r\n/**\r\n * Update the noise increment (e.g. scale)\r\n * @param  {number} increment New increment (scale) value\r\n */\r\nNoiseGenerator1D.prototype.setIncrement = function (increment) {\r\n    if (increment !== undefined) this.increment = increment;\r\n};\r\n\r\n/** \r\n * Generate the next noise value\r\n * @return {number} A noisy value between object's min and max\r\n */\r\nNoiseGenerator1D.prototype.generate = function () {\r\n    this._update();\r\n    var n = this.p.noise(this.position);\r\n    n = this.p.map(n, 0, 1, this.min, this.max);\r\n    return n;\r\n};\r\n\r\n/**\r\n * Internal update method for generating next noise value\r\n * @private\r\n */\r\nNoiseGenerator1D.prototype._update = function () {\r\n    this.position += this.increment;\r\n};\r\n\r\n\r\n// -- 2D Noise Generator -------------------------------------------------------\r\n\r\nfunction NoiseGenerator2D(p, xMin, xMax, yMin, yMax, xIncrement, yIncrement, \r\n                          xOffset, yOffset) {\r\n    this.xNoise = new NoiseGenerator1D(p, xMin, xMax, xIncrement, xOffset);\r\n    this.yNoise = new NoiseGenerator1D(p, yMin, yMax, yIncrement, yOffset);\r\n    this.p = p;\r\n}\r\n\r\n/**\r\n * Update the min and max noise values\r\n * @param  {object} options Object with bounds to be updated e.g. \r\n *                          { xMin: 0, xMax: 1, yMin: -1, yMax: 1 }\r\n */\r\nNoiseGenerator2D.prototype.setBounds = function (options) {\r\n    if (!options) return;\r\n    if (options.xMin !== undefined) this.xMin = options.xMin;\r\n    if (options.xMax !== undefined) this.xMax = options.xMax;\r\n    if (options.yMin !== undefined) this.yMin = options.yMin;\r\n    if (options.yMax !== undefined) this.yMax = options.yMax;\r\n};\r\n\r\n/**\r\n * Update the increment (e.g. scale) for the noise generator\r\n * @param  {object} options Object with bounds to be updated e.g. \r\n *                          { xIncrement: 0.05, yIncrement: 0.1 }\r\n */\r\nNoiseGenerator2D.prototype.setBounds = function (options) {\r\n    if (!options) return;\r\n    if (options.xIncrement !== undefined) this.xNoise.setIncrement(\r\n                                                            options.xIncrement);\r\n    if (options.yIncrement !== undefined) this.yNoise.setIncrement(\r\n                                                            options.yIncrement);\r\n};\r\n\r\n/**\r\n * Generate the next pair of noise values\r\n * @return {object} Object with x and y properties that contain the next noise\r\n *                  values along each dimension\r\n */\r\nNoiseGenerator2D.prototype.generate = function () {\r\n    return {\r\n        x: this.xNoise.generate(),\r\n        y: this.yNoise.generate()\r\n    };\r\n};","module.exports = SinGenerator\r\n\r\n/**\r\n * A utility class for generating values along a sinwave\r\n * @constructor\r\n * @param {object} p               Reference to a p5 sketch\r\n * @param {number} [min=0]         Minimum value for the noise\r\n * @param {number} [max=1]         Maximum value for the noise\r\n * @param {number} [increment=0.1] Increment used when updating\r\n * @param {number} [offset=random] Where to start along the sinewave\r\n */\r\nfunction SinGenerator(p, min, max, angleIncrement, startingAngle) {\r\n    this.p = p;\r\n    this.min = (min !== undefined) ? min : 0;\r\n    this.max = (max !== undefined) ? max : 1;\r\n    this.increment = (angleIncrement !== undefined) ? angleIncrement : 0.1;\r\n    this.angle = (startingAngle !== undefined) ? startingAngle :\r\n                                                 p.random(-1000000, 1000000);\r\n}\r\n\r\n/**\r\n * Update the min and max values\r\n * @param  {number} min Minimum value\r\n * @param  {number} max Maximum value\r\n */\r\nSinGenerator.prototype.setBounds = function (min, max) {\r\n    if (min !== undefined) this.min = min;\r\n    if (max !== undefined) this.max = max;\r\n};\r\n\r\n/**\r\n * Update the angle increment (e.g. how fast we move through the sinwave)\r\n * @param  {number} increment New increment value\r\n */\r\nSinGenerator.prototype.setIncrement = function (increment) {\r\n    if (increment !== undefined) this.increment = increment;\r\n};\r\n\r\n/** \r\n * Generate the next value\r\n * @return {number} A value between generators's min and max\r\n */\r\nSinGenerator.prototype.generate = function () {\r\n    this._update();\r\n    var n = this.p.sin(this.angle);\r\n    n = this.p.map(n, -1, 1, this.min, this.max);\r\n    return n;\r\n};\r\n\r\n/**\r\n * Internal update method for generating next value\r\n * @private\r\n */\r\nSinGenerator.prototype._update = function () {\r\n    this.angle += this.increment;\r\n};","require(\"./sketches/noisy-word.js\")();\r\nrequire(\"./sketches/halftone-flashlight-word.js\")();\r\nrequire(\"./sketches/word-particle-wrapping.js\")();","module.exports = TextParticle;\r\n\r\nvar BboxText = require(\"p5-bbox-aligned-text\");\r\n\r\nfunction TextParticle(p, font, fontSize, text, position, velocity) {\r\n    this.p = p;\r\n    this._pos = position;\r\n    this._vel = velocity;\r\n    this._rotation = 0;\r\n    this._bboxText = new BboxText(font, text, fontSize, p);\r\n    this._bboxText.setAnchor(BboxText.ALIGN.BOX_CENTER, \r\n                             BboxText.BASELINE.BOX_CENTER);\r\n\r\n    // Calculate particle bounds\r\n    var bounds = this._bboxText.getBbox(this._pos.x, this._pos.y);\r\n    this.width = bounds.w;\r\n    this.halfWidth = bounds.w / 2;\r\n    this.height = bounds.h;\r\n    this.halfHeight = bounds.h / 2;\r\n\r\n    // Holding on to the offscreen position for when the word is partially \r\n    // offscreen, but not completely offscreen.\r\n    this._wrappedPos = null;\r\n    this._xReflectPos = null;\r\n    this._yReflectPos = null;\r\n}\r\n\r\nTextParticle.prototype.setVelocity = function (velocity) {\r\n    this._vel.x = velocity.x;\r\n    this._vel.y = velocity.y;\r\n}\r\n\r\nTextParticle.prototype.setRotation = function (radians) {\r\n    this._bboxText.setRotation(radians);\r\n}\r\n\r\nTextParticle.prototype.update = function () {\r\n    // Update position\r\n    this._pos.add(this._vel);\r\n\r\n    // If the particle is partially offscreen (but not fully), draw two \r\n    // particles - one that is wrapped around the screen and one that is not.\r\n    this._wrappedPos = this._pos.copy();\r\n    this._xReflectPos = this._pos.copy();\r\n    this._yReflectPos = this._pos.copy();\r\n\r\n    // Calculate the positions of the sides of the particle\r\n    var left = this._pos.x - this.halfWidth;\r\n    var right = this._pos.x + this.halfWidth;\r\n    var top = this._pos.y - this.halfHeight;\r\n    var bottom = this._pos.y + this.halfHeight;\r\n\r\n    // Check if word is offscreen along x-axis\r\n    if (right > this.p.width) {\r\n        var amountOffscreen = right - this.p.width;\r\n        if (amountOffscreen > this.width) {\r\n            // Word is completely off the right edge of the screen, so it\r\n            // needs to be wrapped around to the left side of the screen. It is\r\n            // important to account for the \"remainder\" to get smooth motion:\r\n            // (amountOffscreen - this.width) = distance from left edge of word\r\n            //                                  to the right edge of the screen\r\n            var distBeyondWrap = (amountOffscreen - this.width);\r\n            this._pos.x = this.halfWidth + distBeyondWrap;\r\n            // If the particle wraps around the y-axis, we want to keep the x\r\n            // position up to date\r\n            this._wrappedPos.x = this._pos.x;\r\n        }\r\n        else {\r\n            // Word is only partially off the right edge of the screen, so the\r\n            // wrappedPos is going to be used. Project what the position of the\r\n            // particle would be if it were wrapped around the left edge of the\r\n            // screen\r\n            this._wrappedPos.x = -this.halfWidth + amountOffscreen;\r\n            this._xReflectPos.x = -this.halfWidth + amountOffscreen;\r\n        }\r\n    }\r\n    else if (left < 0) {\r\n        var amountOffscreen = -left;\r\n        if (amountOffscreen > this.width) {\r\n            // Word is completely off the left edge of the screen, so it needs\r\n            // to be wrapped around to the right side of the screen\r\n            var distBeyondWrap = (amountOffscreen - this.width);\r\n            this._pos.x = (this.p.width - this.halfWidth) - distBeyondWrap;\r\n            this._wrappedPos.x = this._pos.x;\r\n        }\r\n        else {\r\n            // Word is only partially off the left edge of the screen\r\n            this._wrappedPos.x = (this.p.width + this.halfWidth) - amountOffscreen;\r\n            this._xReflectPos.x = (this.p.width + this.halfWidth) - amountOffscreen;\r\n        }\r\n    }\r\n\r\n    // Check if word is offscreen along y-axis\r\n    if (bottom > this.p.height) {\r\n        var amountOffscreen = bottom - this.p.height;\r\n        if (amountOffscreen > this.height) {\r\n            // Word is completely off the bottom edge of the screen, so it\r\n            // needs to be wrapped around to the top side of the screen \r\n            var distBeyondWrap = (amountOffscreen - this.height);\r\n            this._pos.y = this.halfHeight + distBeyondWrap;\r\n            // If the particle wraps around the x-axis, we want to keep the y\r\n            // position up to date\r\n            this._wrappedPos.y = this._pos.y;\r\n        }\r\n        else {\r\n            // Word is only partially off the bottom edge of the screen\r\n            this._wrappedPos.y = -this.halfHeight + amountOffscreen;\r\n            this._yReflectPos.y = -this.halfHeight + amountOffscreen;\r\n        }\r\n    }\r\n    else if (top < 0) {\r\n        var amountOffscreen = -top;\r\n        if (amountOffscreen > this.height) {\r\n            // Word is completely off the top edge of the screen, so it needs\r\n            // to be wrapped around to the bottom side of the screen\r\n            var distBeyondWrap = (amountOffscreen - this.height);\r\n            this._pos.y = (this.p.height - this.halfHeight) - distBeyondWrap;\r\n            this._wrappedPos.y = this._pos.y;\r\n        }\r\n        else {\r\n            // Word is only partially off the top edge of the screen\r\n            this._wrappedPos.y = (this.p.height + this.halfHeight) - amountOffscreen;\r\n            this._yReflectPos.y = (this.p.height + this.halfHeight) - amountOffscreen;\r\n        }\r\n    }\r\n\r\n};\r\n\r\nTextParticle.prototype.draw = function () {\r\n    this._bboxText.draw(this._pos.x, this._pos.y, this._rotation);\r\n\r\n    if (!this._wrappedPos.equals(this._pos)) {\r\n        // wrappedPos has a different value, so the particle is offscreen       \r\n        this._bboxText.draw(this._wrappedPos.x, this._wrappedPos.y, \r\n                            this._rotation);\r\n    }\r\n    \r\n    if (this._xReflectPos.x !== this._pos.x) {        \r\n        this._xReflectPos.y = this._pos.y;\r\n        this._bboxText.draw(this._xReflectPos.x, this._xReflectPos.y,\r\n                            this._rotation);\r\n    }\r\n\r\n    if (this._yReflectPos.y !== this._pos.y) {        \r\n        this._yReflectPos.x = this._pos.x;\r\n        this._bboxText.draw(this._yReflectPos.x, this._yReflectPos.y, \r\n                            this._rotation);\r\n    }\r\n};","module.exports = startSketch;\r\n\r\n// Modules\r\nvar dom = require(\"../utilities/dom-utilities.js\");\r\nvar Noise = require(\"../generators/noise-generators.js\");\r\nvar BboxText = require(\"p5-bbox-aligned-text\");\r\n\r\n// Globals\r\nvar p, font, circles, bboxText;\r\nvar isFirstFrame = true;\r\nvar isMouseOver = false;\r\nvar canvasSize = {\r\n    width: 400,\r\n    height: 150\r\n};\r\nvar text = \"halftone\";\r\nvar fontSize = 150;\r\nvar fontPath = \"./assets/fonts/leaguegothic-regular-webfont.ttf\";\r\n\r\nfunction startSketch() { \r\n    // Create div on page for the sketch\r\n    var id = \"halftone-flashlight-word\";\r\n    var sketchesContainer = document.getElementById(\"sketches\");\r\n    var sketchDiv = dom.createElement(\"div\", {id: id}, sketchesContainer);\r\n\r\n    // Create a p5 instance inside of the ID specified\r\n    new p5(function (_p) {\r\n        p = _p;\r\n        p.preload = preload;\r\n        p.setup = setup;\r\n        p.draw = draw;\r\n    }, id); \r\n}\r\n\r\nfunction preload() {\r\n    // Load the font into a global - this way we can ask the font for a bbox\r\n    font = p.loadFont(fontPath);\r\n}\r\n\r\nfunction setup() {\r\n    var renderer = p.createCanvas(canvasSize.width, canvasSize.height);\r\n\r\n    // There isn't a good way to check whether the sketch has the mouse over\r\n    // it. p.mouseX & p.mouseY are initialized to (0, 0), and p.focused isn't \r\n    // always reliable.\r\n    renderer.canvas.addEventListener(\"mouseover\", function () {\r\n        isMouseOver = true;\r\n    });\r\n    renderer.canvas.addEventListener(\"mouseout\", function () {\r\n        isMouseOver = false;\r\n    });\r\n\r\n    // Draw the stationary text\r\n    p.background(255);\r\n    p.textSize(fontSize);\r\n    bboxText = new BboxText(font, text, fontSize, p);\r\n    bboxText.setAnchor(BboxText.ALIGN.BOX_CENTER, \r\n                       BboxText.BASELINE.FONT_CENTER);\r\n    p.noStroke();\r\n    p.fill(\"#0A000A\");    \r\n    bboxText.draw(p.width / 2, p.height / 2);\r\n\r\n\r\n    // Loop over the pixels in the text's bounding box to sample the word\r\n    var bbox = bboxText.getBbox(p.width / 2, p.height / 2);\r\n    var startX = Math.floor(Math.max(bbox.x - 5, 0));\r\n    var endX = Math.ceil(Math.min(bbox.x + bbox.w + 5, p.width));\r\n    var startY = Math.floor(Math.max(bbox.y - 5, 0));\r\n    var endY = Math.ceil(Math.min(bbox.y + bbox.h + 5, p.height));\r\n    var spacing = 5;\r\n    p.loadPixels();\r\n    p.pixelDensity(1);\r\n    circles = [];\r\n    for (var y = startY; y < endY; y += spacing) {\r\n        for (var x = startX; x < endX; x += spacing) {  \r\n            var i = 4 * ((y * p.width) + x);\r\n            var r = p.pixels[i];\r\n            var g = p.pixels[i + 1];\r\n            var b = p.pixels[i + 2];\r\n            var a = p.pixels[i + 3];\r\n            var c = p.color(r, g, b, a);\r\n            if (p.saturation(c) > 0) {\r\n                circles.push({\r\n                    x: x + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    y: y + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    color: p.color(\"#06FFFF\")\r\n                });\r\n                circles.push({\r\n                    x: x + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    y: y + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    color: p.color(\"#FE00FE\")\r\n                });\r\n                circles.push({\r\n                    x: x + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    y: y + p.random(-2/3 * spacing, 2/3 * spacing),\r\n                    color: p.color(\"#FFFF04\")\r\n                });\r\n            }\r\n        }\r\n    }\r\n    p.updatePixels();\r\n}\r\n\r\nfunction draw() {\r\n    // No need to do anything if the mouse isn't over the sketch\r\n    if (!isMouseOver) return;\r\n\r\n    // When the text is about to become active for the first time, clear\r\n    // the stationary logo that was drawn during setup. \r\n    if (isFirstFrame) {\r\n        p.background(255);\r\n        isFirstFrame = false;\r\n    }\r\n\r\n    // Clear\r\n    p.blendMode(p.BLEND);\r\n    p.background(255);\r\n\r\n    // Draw \"halftone\" logo\r\n    p.noStroke();   \r\n    p.blendMode(p.MULTIPLY);\r\n    for (var i = 0; i < circles.length; i += 1) {\r\n        var circle = circles[i];\r\n        var c = circle.color;\r\n        var dist = p.dist(circle.x, circle.y, p.mouseX, p.mouseY);\r\n        var radius = p.map(dist, 0, 150, 1, 10);\r\n        p.fill(c);\r\n        p.ellipse(circle.x, circle.y, radius, radius);\r\n    }\r\n}","module.exports = startSketch;\r\n\r\n// Modules\r\nvar dom = require(\"../utilities/dom-utilities.js\");\r\nvar Noise = require(\"../generators/noise-generators.js\");\r\n\r\n// Globals\r\nvar p, font, rotationNoise, xyNoise;\r\nvar isFirstFrame = true;\r\nvar isMouseOver = false;\r\nvar canvasSize = {\r\n\twidth: 400,\r\n\theight: 150\r\n};\r\nvar text = \"Squiggle\";\r\nvar fontSize = 100;\r\nvar fontPath = \"./assets/fonts/leaguegothic-regular-webfont.ttf\";\r\n\r\nfunction startSketch() {\t\r\n\t// Create div on page for the sketch\r\n\tvar id = \"noisy-word\";\r\n\tvar sketchesContainer = document.getElementById(\"sketches\");\r\n\tvar sketchDiv = dom.createElement(\"div\", {id: id}, sketchesContainer);\r\n\r\n\t// Create a p5 instance inside of the ID specified\r\n\tnew p5(function (_p) {\r\n\t\tp = _p;\r\n\t\tp.preload = preload;\r\n\t\tp.setup = setup;\r\n\t\tp.draw = draw;\r\n\t}, id);\t\r\n}\r\n\r\nfunction preload() {\r\n\t// Load the font into a global - this way we can ask the font for a bbox\r\n\tfont = p.loadFont(fontPath);\r\n}\r\n\r\nfunction setup() {\r\n\tvar renderer = p.createCanvas(canvasSize.width, canvasSize.height);\r\n\r\n\t// There isn't a good way to check whether the sketch has the mouse over\r\n\t// it. p.mouseX & p.mouseY are initialized to (0, 0), and p.focused isn't \r\n\t// always reliable.\r\n\trenderer.canvas.addEventListener(\"mouseover\", function () {\r\n\t\tisMouseOver = true;\r\n\t});\r\n\trenderer.canvas.addEventListener(\"mouseout\", function () {\r\n\t\tisMouseOver = false;\r\n\t});\r\n\r\n\t// Draw the stationary text\r\n\tp.background(255);\r\n\tp.textFont(font);\r\n\tp.textSize(fontSize);\r\n\tp.textAlign(p.CENTER, p.CENTER);\r\n\tp.stroke(255);\r\n\tp.fill(\"#0A000A\");\r\n\tp.strokeWeight(2);\t\t\r\n\tp.text(text, p.width / 2, p.height / 2);\r\n\r\n\t// Set up noise generators\r\n\trotationNoise = new Noise.NoiseGenerator1D(p, -p.PI/4, p.PI/4, 0.02); \r\n\txyNoise = new Noise.NoiseGenerator2D(p, -100, 100, -50, 50, 0.01, 0.01);\r\n}\r\n\r\nfunction draw() {\r\n\t// No need to do anything if the mouse isn't over the sketch\r\n\tif (!isMouseOver) return;\r\n\r\n\t// When the text is about to become active for the first time, clear\r\n\t// the stationary logo that was drawn during setup. \r\n\tif (isFirstFrame) {\r\n\t\tp.background(255);\r\n\t\tisFirstFrame = false;\r\n\t}\r\n\r\n\t// Calculate position and rotation to create a jittery logo\r\n\tvar rotation = rotationNoise.generate();\r\n\tvar xyOffset = xyNoise.generate();\r\n\r\n\t// Draw the logo\r\n\tp.push();\r\n\t\tp.translate(p.width / 2 + xyOffset.x, p.height / 2 + xyOffset.y);\r\n\t\tp.rotate(rotation);\r\n\t\tp.text(text, 0, 0);\r\n\tp.pop();\r\n}","module.exports = startSketch;\r\n\r\n// Modules\r\nvar dom = require(\"../utilities/dom-utilities.js\");\r\nvar Noise = require(\"../generators/noise-generators.js\");\r\nvar SinGenerator = require(\"../generators/sin-generator.js\");\r\nvar TextParticle = require(\"../particles/text-particle.js\");\r\n\r\n// Globals\r\nvar p, font, textParticle, rotationGenerator, sinGenerator;\r\nvar isFirstFrame = true;\r\nvar isMouseOver = false;\r\nvar canvasSize = {\r\n    width: 400,\r\n    height: 150\r\n};\r\nvar text = \"Ripple\";\r\nvar fontSize = 50;\r\nvar fontPath = \"./assets/fonts/leaguegothic-regular-webfont.ttf\";\r\n\r\nfunction startSketch() {    \r\n    // Create div on page for the sketch\r\n    var id = \"word-particle-wrapping\";\r\n    var sketchesContainer = document.getElementById(\"sketches\");\r\n    var sketchDiv = dom.createElement(\"div\", {id: id}, sketchesContainer);\r\n\r\n    // Create a p5 instance inside of the ID specified\r\n    new p5(function (_p) {\r\n        p = _p;\r\n        p.preload = preload;\r\n        p.setup = setup;\r\n        p.draw = draw;\r\n    }, id); \r\n}\r\n\r\nfunction preload() {\r\n    // Load the font into a global - this way we can ask the font for a bbox\r\n    font = p.loadFont(fontPath);\r\n}\r\n\r\nfunction setup() {\r\n    var renderer = p.createCanvas(canvasSize.width, canvasSize.height);\r\n\r\n    // There isn't a good way to check whether the sketch has the mouse over\r\n    // it. p.mouseX & p.mouseY are initialized to (0, 0), and p.focused isn't \r\n    // always reliable.\r\n    renderer.canvas.addEventListener(\"mouseover\", function () {\r\n        isMouseOver = true;\r\n    });\r\n    renderer.canvas.addEventListener(\"mouseout\", function () {\r\n        isMouseOver = false;\r\n    });\r\n\r\n    // Draw the stationary text\r\n    p.background(255);\r\n    p.textFont(font);\r\n    p.textSize(fontSize);\r\n    p.textAlign(p.CENTER, p.CENTER);\r\n    p.stroke(255);\r\n    p.fill(\"#00ACE0\");\r\n    p.strokeWeight(2);      \r\n    p.text(text, p.width / 2, p.height / 2);\r\n\r\n    // Create the word particle\r\n    var pos = p.createVector(p.width / 2, p.height / 2);\r\n    var vel = p.createVector(3, -1); \r\n    textParticle = new TextParticle(p, font, fontSize, text, pos, vel);\r\n\r\n    rotationGenerator = new SinGenerator(p, -Math.PI/5, Math.PI/5, 0.06);\r\n    directionGenerator = new Noise.NoiseGenerator1D(p, 0, p.TWO_PI, 0.005);\r\n}\r\n\r\nfunction draw() {\r\n    // No need to do anything if the mouse isn't over the sketch\r\n    if (!isMouseOver) return;\r\n\r\n    // When the text is about to become active for the first time, clear\r\n    // the stationary logo that was drawn during setup. \r\n    if (isFirstFrame) {\r\n        p.background(255);\r\n        isFirstFrame = false;\r\n    }\r\n\r\n    // Update the particles velocity and rotation\r\n    var angle = directionGenerator.generate();\r\n    textParticle.setVelocity({x: p.cos(angle) * 1.25, y: p.sin(angle) * 1.25});\r\n    var rotation = rotationGenerator.generate();\r\n    textParticle.setRotation(rotation);\r\n    textParticle.update();\r\n\r\n    // Draw the particle\r\n    p.fill(\"#00ACE0\");\r\n    p.stroke(255);\r\n    p.strokeWeight(1);\r\n    textParticle.draw();\r\n}","module.exports.forEachInObject = function (object, iterationFunction) {\r\n\tif (!object) return;\r\n\tfor (var key in object) {\r\n\t\tif (!object.hasOwnProperty(key)) continue;\r\n\t\titerationFunction(key, object[key], object);\r\n\t}\r\n};\r\n\r\nmodule.exports.createElement = function (tagName, parameters, parent) {\r\n\tvar el = document.createElement(tagName);\r\n\tif (parameters) {\r\n\t\tif (parameters.textContent) el.textContent = parameters.textContent;\r\n\t\tif (parameters.id) el.id = parameters.id;\r\n\t\tif (parameters.className) el.className = parameters.className;\r\n\t\tif (parameters.style) addStyle(el, parameters.style);\r\n\t\tif (parameters.attributes) addAttributes(el, parameters.attributes);\r\n\t}\t\r\n\tif (parent) parent.appendChild(el);\r\n\treturn el;\r\n};\r\n\r\nmodule.exports.addStyle = function (element, style) {\r\n\tif (!style) return;\r\n\tforEachInObject(style, function (key, val) {\r\n\t\telement.style[key] = val;\r\n\t});\t\r\n};\r\n\r\nmodule.exports.addAttributes = function (element, attributes) {\r\n\tif (!attributes) return;\r\n\tforEachInObject(attributes, function (key, val) {\r\n\t\telement[key] = val;\r\n\t});\t\r\n};\r\n\r\nmodule.exports.removeElement = function (element) {\r\n\telement.parentElement.removeChild(element);\r\n};"]}